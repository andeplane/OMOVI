{"version":3,"file":"index.modern.js","sources":["../src/core/materials.ts","../src/core/visualizer.ts","../src/OMOVIVisualizer.tsx","../src/core/geometries/particles/fragment.ts","../src/core/geometries/particles/vertex.ts","../src/core/geometries/particles/particles.ts","../src/core/geometries/bonds/fragment.ts","../src/core/geometries/bonds/vertex.ts","../src/core/geometries/bonds/bonds.ts","../src/core/atomtypes.ts","../src/core/simulationdata/simulationdata.ts","../src/core/simulationdata/simulationcell.ts","../src/core/simulationdata/simulationdataframe.ts","../src/parsers/xyzparser.ts","../src/utils/kdtree/binary-heap.ts","../src/utils/kdtree/kdtree.ts","../src/utils/bondcreators.ts"],"sourcesContent":["import * as THREE from 'three'\n\nexport interface Uniforms {\n  [name: string]: THREE.IUniform\n}\n\nexport interface Extensions {\n  fragDepth?: boolean\n}\n\nclass Material extends THREE.MeshPhongMaterial {\n  materialType: string\n  uniforms: Uniforms\n  extensions: Extensions\n\n  constructor(\n    materialType: string,\n    parameters?: THREE.MeshPhongMaterialParameters\n  ) {\n    super(parameters)\n    // @ts-ignore\n    this.materialType = materialType\n    this.uniforms = {}\n    this.extensions = {}\n    this.defines = {}\n  }\n\n  copy(source: THREE.Material): this {\n    THREE.MeshPhongMaterial.prototype.copy.call(this, source)\n    const castedSource = source as Material\n    this.type = castedSource.type\n    this.defines = { ...castedSource.defines }\n    this.extensions = castedSource.extensions\n    this.uniforms = castedSource.uniforms\n    this.onBeforeCompile = castedSource.onBeforeCompile\n    return this\n  }\n\n  clone(): this {\n    // three.js uses \"this\" for no good reason, and we need to match that\n    const material = new THREE.MeshPhongMaterial()\n    Material.prototype.copy.call(material, this)\n    return material as this\n  }\n}\n\nconst materialMap: { [key: string]: Material } = {}\nlet _fragDepthSupported: boolean | undefined\n\nfunction fragDepthSupported() {\n  if (_fragDepthSupported !== undefined) {\n    return _fragDepthSupported\n  }\n\n  const renderer = new THREE.WebGLRenderer()\n  const gl = renderer.domElement.getContext('webgl')\n\n  if (\n    renderer.capabilities.isWebGL2 ||\n    (gl != null && gl.getExtension('EXT_frag_depth') != null)\n  ) {\n    _fragDepthSupported = true\n  } else {\n    _fragDepthSupported = false\n  }\n\n  renderer.dispose()\n\n  return _fragDepthSupported\n}\n\nconst createMaterial = (\n  type: string,\n  vertexShader: string,\n  fragmentShader: string\n) => {\n  if (materialMap[type] != null) {\n    return materialMap[type]\n  }\n\n  const material = new Material(type, { color: 0xffffff })\n  material.uniforms.inverseModelMatrix = { value: new THREE.Matrix4() }\n  material.uniforms.inverseNormalMatrix = { value: new THREE.Matrix3() }\n\n  if (fragDepthSupported()) {\n    material.extensions.fragDepth = true\n    material.defines!.FRAG_DEPTH = 1\n  }\n\n  material.onBeforeCompile = (shader: THREE.Shader) => {\n    Object.assign(shader.uniforms, material.uniforms)\n    material.uniforms = shader.uniforms\n\n    shader.vertexShader = vertexShader\n    shader.fragmentShader = fragmentShader\n  }\n\n  // Necessary because of a bug in THREE.JS\n  // https://github.com/mrdoob/three.js/issues/15948\n  material.onBeforeCompile.toString = () => type\n\n  materialMap[type] = material\n  return material\n}\n\nexport default createMaterial\nexport { Material }\n","import * as THREE from 'three'\nimport ComboControls from '@cognite/three-combo-controls'\nimport { Material } from './materials'\n\n// @ts-ignore\nimport Stats from 'stats.js'\n\nconst inverseModelMatrix = new THREE.Matrix4()\nconst modelViewMatrix = new THREE.Matrix4()\nconst normalMatrix = new THREE.Matrix3()\nconst inverseNormalMatrix = new THREE.Matrix3()\n\nconst adjustCamera = (\n  camera: THREE.PerspectiveCamera,\n  width: number,\n  height: number\n) => {\n  if (camera instanceof THREE.PerspectiveCamera) {\n    camera.aspect = width / height\n  }\n  camera.updateProjectionMatrix()\n}\n\nexport default class Visualizer {\n  private renderer: THREE.WebGLRenderer\n  private canvas: HTMLCanvasElement\n  public scene: THREE.Scene\n  private camera: THREE.PerspectiveCamera\n  private ambientLight: THREE.AmbientLight\n  private directionalLight: THREE.DirectionalLight\n  private controls: ComboControls\n  private clock: THREE.Clock\n  private domElement: HTMLElement\n  private object: THREE.Object3D\n  private stats: Stats\n  private materials: { [key: string]: Material }\n\n  // @ts-ignore\n  private latestRequestId?: number\n\n  constructor(domElement: HTMLElement) {\n    this.renderer = new THREE.WebGLRenderer()\n\n    this.canvas = this.renderer.domElement\n    this.domElement = domElement\n    this.domElement.appendChild(this.canvas)\n    this.setupCanvas(this.canvas)\n\n    this.scene = new THREE.Scene()\n\n    this.ambientLight = new THREE.AmbientLight(0xffffff)\n    this.directionalLight = new THREE.DirectionalLight(0xffffff)\n    this.setupLights(this.ambientLight, this.directionalLight, this.scene)\n\n    this.camera = new THREE.PerspectiveCamera(60, 640 / 480, 0.1, 10000)\n    this.setupCamera(this.camera)\n    this.controls = new ComboControls(this.camera, this.canvas)\n\n    this.latestRequestId = undefined\n    this.clock = new THREE.Clock()\n    this.object = new THREE.Object3D()\n    this.scene.add(this.object)\n\n    this.stats = new Stats()\n    this.stats.showPanel(0) // 0: fps, 1: ms, 2: mb, 3+: custom\n    document.body.appendChild(this.stats.dom)\n\n    this.materials = {}\n    this.animate()\n  }\n\n  add = (object: THREE.Mesh) => {\n    if (object == null) {\n      return\n    }\n\n    if (object.material instanceof Material) {\n      const material = object.material as Material\n      const materialType = material.type\n      if (this.materials[materialType] == null) {\n        this.materials[materialType] = material\n      }\n    }\n\n    this.object.add(object)\n  }\n\n  remove = (object: THREE.Mesh) => {\n    this.object.remove(object)\n  }\n\n  setupLights = (\n    ambientLight: THREE.AmbientLight,\n    directionalLight: THREE.DirectionalLight,\n    scene: THREE.Scene\n  ) => {\n    ambientLight.intensity = 0.3\n    directionalLight.intensity = 0.7\n    scene.add(directionalLight)\n    scene.add(ambientLight)\n  }\n\n  setupCanvas = (canvas: HTMLCanvasElement) => {\n    canvas.style.width = '640px'\n    canvas.style.height = '480px'\n    canvas.style.minWidth = '100%'\n    canvas.style.minHeight = '100%'\n    canvas.style.maxWidth = '100%'\n    canvas.style.maxHeight = '100%'\n  }\n\n  setupCamera = (camera: THREE.PerspectiveCamera) => {\n    camera.position.set(10, 10, 10)\n    camera.lookAt(new THREE.Vector3(0, 0, 0))\n  }\n\n  updateUniforms = (camera: THREE.PerspectiveCamera) => {\n    this.object.matrixWorld.copy(this.object.matrixWorld).invert()\n    modelViewMatrix\n      .copy(camera.matrixWorldInverse)\n      .multiply(this.object.matrixWorld)\n    normalMatrix.getNormalMatrix(modelViewMatrix)\n    inverseNormalMatrix.copy(normalMatrix).invert()\n\n    Object.values(this.materials).forEach((material) => {\n      if (material.uniforms.inverseModelMatrix != null) {\n        material.uniforms.inverseModelMatrix.value.copy(inverseModelMatrix)\n      }\n      if (material.uniforms.inverseNormalMatrix != null) {\n        material.uniforms.inverseNormalMatrix.value.copy(inverseNormalMatrix)\n      }\n    })\n  }\n\n  dispose = () => {\n    this.domElement.removeChild(this.canvas)\n    this.renderer.dispose()\n  }\n\n  getCameraPosition = () => {\n    return this.controls.getState().position\n  }\n\n  getCameraTarget = () => {\n    return this.controls.getState().target\n  }\n\n  setCameraPosition = (position: THREE.Vector3) => {\n    this.controls.setState(position, this.getCameraTarget())\n  }\n\n  setCameraTarget = (target: THREE.Vector3) => {\n    this.controls.setState(this.getCameraPosition(), target)\n  }\n\n  animate = () => {\n    this.stats.begin()\n    this.resizeIfNeeded()\n    this.controls.update(this.clock.getDelta())\n\n    this.updateUniforms(this.camera)\n    this.renderer.render(this.scene, this.camera)\n    this.stats.end()\n\n    this.latestRequestId = requestAnimationFrame(this.animate.bind(this))\n    // console.log(this.camera.position.clone())\n  }\n\n  resizeIfNeeded = () => {\n    // The maxTextureSize is chosen from testing on low-powered hardware,\n    // and could be increased in the future.\n    // TODO Increase maxTextureSize if SSAO performance is improved\n    const maxTextureSize = 1.4e6\n\n    const rendererSize = this.renderer.getSize(new THREE.Vector2())\n    const rendererPixelWidth = rendererSize.width\n    const rendererPixelHeight = rendererSize.height\n\n    // client width and height are in virtual pixels and not yet scaled by dpr\n    // TODO VERSION 5.0.0 remove the test for dom element size once we have removed the getCanvas function\n    const clientWidth =\n      this.domElement.clientWidth !== 0\n        ? this.domElement.clientWidth\n        : this.canvas.clientWidth\n    const clientHeight =\n      this.domElement.clientHeight !== 0\n        ? this.domElement.clientHeight\n        : this.canvas.clientHeight\n    const clientPixelWidth = window.devicePixelRatio * clientWidth\n    const clientPixelHeight = window.devicePixelRatio * clientHeight\n    const clientTextureSize = clientPixelWidth * clientPixelHeight\n\n    const scale =\n      clientTextureSize > maxTextureSize\n        ? Math.sqrt(maxTextureSize / clientTextureSize)\n        : 1\n\n    const width = clientPixelWidth * scale\n    const height = clientPixelHeight * scale\n\n    const maxError = 0.1 // pixels\n    const isOptimalSize =\n      Math.abs(rendererPixelWidth - width) < maxError &&\n      Math.abs(rendererPixelHeight - height) < maxError\n\n    if (isOptimalSize) {\n      return false\n    }\n\n    this.renderer.setSize(width, height)\n\n    adjustCamera(this.camera, width, height)\n\n    return true\n  }\n}\n","import React, { useEffect, useState, useRef } from 'react'\nimport Visualizer from './core/visualizer'\nimport Particles from './core/geometries/particles/particles'\nimport Bonds from './core/geometries/bonds/bonds'\n\nlet newVisualizer: Visualizer | undefined\n\nconst OMOVIVisualizer = ({\n  particles,\n  bonds,\n  cameraTarget,\n  cameraPosition\n}: {\n  particles?: Particles\n  bonds?: Bonds\n  cameraTarget?: THREE.Vector3\n  cameraPosition?: THREE.Vector3\n}) => {\n  const domElement = useRef<HTMLDivElement | null>(null)\n  const [visualizer, setVisualizer] = useState<Visualizer | undefined>(\n    undefined\n  )\n\n  useEffect(() => {\n    if (domElement.current && !newVisualizer) {\n      newVisualizer = new Visualizer(domElement.current)\n      setVisualizer(newVisualizer)\n    }\n  }, [domElement, visualizer])\n\n  const prevParticlesRef = useRef<Particles>()\n  useEffect(() => {\n    prevParticlesRef.current = particles\n  })\n  const prevParticles = prevParticlesRef.current\n\n  const prevBondsRef = useRef<Bonds>()\n  useEffect(() => {\n    prevBondsRef.current = bonds\n  })\n  const prevBonds = prevBondsRef.current\n\n  useEffect(() => {\n    if (!visualizer) {\n      return\n    }\n\n    if (prevParticles) {\n      visualizer.remove(prevParticles.getMesh())\n    }\n    if (particles) {\n      visualizer.add(particles.getMesh())\n    }\n\n    if (prevBonds) {\n      visualizer.remove(prevBonds.getMesh()!)\n    }\n    if (bonds) {\n      visualizer.add(bonds.getMesh()!)\n    }\n  }, [particles, bonds, visualizer])\n\n  useEffect(() => {\n    if (visualizer) {\n      if (cameraTarget) {\n        visualizer.setCameraTarget(cameraTarget)\n      }\n    }\n  }, [cameraTarget, visualizer])\n\n  useEffect(() => {\n    if (visualizer) {\n      if (cameraPosition) {\n        visualizer.setCameraPosition(cameraPosition)\n      }\n    }\n  }, [cameraPosition, visualizer])\n\n  useEffect(() => {\n    return () => {\n      console.log('Should dispose visualizer')\n      // visualizer.dispose()\n    }\n  }, [])\n\n  return (\n    <div style={{ height: '100%', width: '100%' }}>\n      <div style={{ height: '100%', width: '100%' }} ref={domElement} />\n    </div>\n  )\n}\nexport default OMOVIVisualizer\n","export default /* glsl */ `\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\nuniform mat4 projectionMatrix;\nvarying vec3 vSurfacePoint;\nvarying vec3 vCenter;\nvarying float vRadius;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tvec3 rayTarget = vSurfacePoint;\n\tvec3 rayDirection = normalize(rayTarget); // rayOrigin is (0,0,0) in camera space\n\n\tvec3 diff = rayTarget - vCenter.xyz;\n    vec3 E = diff;\n    vec3 D = rayDirection;\n\n    float a = dot(D, D);\n    float b = dot(E, D);\n    float c = dot(E, E) - vRadius*vRadius;\n\n    // discriminant of sphere equation (factor 2 removed from b above)\n    float d = b*b - a*c;\n    if(d < 0.0)\n        discard;\n\t\n    float sqrtd = sqrt(d);\n    float dist1 = (-b - sqrtd)/a;\n    float dist2 = (-b + sqrtd)/a;\n\n    // Make sure dist1 is the smaller one\n    if (dist2 < dist1) {\n        float tmp = dist1;\n        dist1 = dist2;\n        dist2 = tmp;\n    }\n\n    float dist = dist1;\n    float intersectionPointZ = E.z + dist*D.z;\n\tvec3 p = rayTarget + dist*rayDirection;\n\n\t// Find normal vector in local space\n    normal = normalize(vec3(p - vCenter.xyz));\n    // Transform into camera space\n    if (dot(normal, rayDirection) >  0.) {\n        normal = -normal;\n    }\n\n#ifdef FRAG_DEPTH\n\tfloat projectedIntersection_z = projectionMatrix[0][2]*p.x + projectionMatrix[1][2]*p.y + projectionMatrix[2][2]*p.z + projectionMatrix[3][2];\n\tfloat projectedIntersection_w = projectionMatrix[0][3]*p.x + projectionMatrix[1][3]*p.y + projectionMatrix[2][3]*p.z + projectionMatrix[3][3];\n\tgl_FragDepthEXT = ((gl_DepthRange.diff * (projectedIntersection_z / projectedIntersection_w)) + gl_DepthRange.near + gl_DepthRange.far) * 0.5;\n#endif\n\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n`\n","export default /* glsl */ `\n#define PHONG\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\nuniform mat4 inverseModelMatrix;\nattribute vec3 particlePosition;\nattribute float particleRadius;\n\nvarying vec3 vSurfacePoint;\nvarying vec3 vCenter;\nvarying float vRadius;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvec3 makePerpendicular(vec3 v) {\n    if(v.x == 0.0 && v.y == 0.0) {\n        if(v.z == 0.0) {\n            return vec3(0.0, 0.0, 0.0);\n        }\n        return vec3(0.0, 1.0, 0.0);\n    }\n    return vec3(-v.y, v.x, 0.0);\n}\n\nvec3 mul3(mat4 M, vec3 v) {\n\tvec4 u = M * vec4(v, 1.0);\n\treturn u.xyz / u.w;\n}\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t\n    vec4 mvPosition = vec4( transformed, 1.0 );\n\n    #ifdef USE_INSTANCING\n\n\tvec3 objectToCameraModelSpace = (inverseModelMatrix*vec4(particlePosition - cameraPosition, 1.0)).xyz;\n    vec3 view = normalize(objectToCameraModelSpace);\n    vec3 right = normalize(makePerpendicular(view));\n    vec3 up = cross(right, view);\n\t\n\t// Factor 2.0 is because geometry is 0.5x\n\tvec3 displacement = 2.0*particleRadius*(position.x * right + position.y * up);\n\t// particlePosition + displacement is the current vertex, also move closer to camera so billboard covers the sphere\n\ttransformed = particlePosition + displacement - particleRadius * view;\n\t\n\tvSurfacePoint = mul3(modelViewMatrix, transformed);\n    vCenter = mul3(modelViewMatrix, particlePosition);\n\tvRadius = particleRadius;\n    #endif\n\n    mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n    gl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n`\n","import * as THREE from 'three'\nimport fragmentShader from './fragment'\nimport vertexShader from './vertex'\nimport createMaterial from 'core/materials'\n\nclass Particles {\n  types: string[]\n  positions: Float32Array\n  indices: Float32Array\n  radii: Float32Array\n  colors: THREE.Color[]\n  count: number\n  capacity: number\n  mesh?: THREE.InstancedMesh\n\n  constructor(capacity: number) {\n    this.types = []\n    this.positions = new Float32Array(3 * capacity)\n    this.indices = new Float32Array(capacity)\n    this.radii = new Float32Array(capacity)\n    this.colors = []\n    this.count = 0\n    this.capacity = capacity\n    this.mesh = undefined\n  }\n\n  add({\n    x,\n    y,\n    z,\n    radius,\n    type = 'H',\n    r = 255.0,\n    g = 0.0,\n    b = 0.0\n  }: {\n    x: number\n    y: number\n    z: number\n    radius: number\n    type: string\n    r: number\n    g: number\n    b: number\n  }) {\n    if (this.count === this.capacity) {\n      console.log(\"Warning, can't add particle because arrays are full\")\n      return\n    }\n\n    const index = this.count\n\n    this.positions[3 * index + 0] = x\n    this.positions[3 * index + 1] = y\n    this.positions[3 * index + 2] = z\n    this.colors.push(new THREE.Color(r / 255, g / 255, b / 255))\n    this.radii[index] = radius * 0.25\n    this.indices[index] = index\n    this.types.push(type)\n\n    this.count += 1\n  }\n\n  getRadius = (index: number) => {\n    return this.radii[index]\n  }\n\n  getPosition = (index: number) => {\n    return new THREE.Vector3(\n      this.positions[3 * index + 0],\n      this.positions[3 * index + 1],\n      this.positions[3 * index + 2]\n    )\n  }\n\n  getType = (index: number) => {\n    return this.types[index]\n  }\n\n  getGeometry = () => {\n    const baseGeometry = new THREE.PlaneBufferGeometry(1, 1, 1, 1)\n    const geometry = new THREE.InstancedBufferGeometry()\n\n    geometry.instanceCount = this.count\n    geometry.setIndex(baseGeometry.getIndex())\n    geometry.setAttribute('position', baseGeometry.getAttribute('position'))\n    geometry.setAttribute('normal', baseGeometry.getAttribute('normal'))\n\n    geometry.setAttribute(\n      'particlePosition',\n      new THREE.InstancedBufferAttribute(this.positions, 3, false, 1)\n    )\n    geometry.setAttribute(\n      'particleRadius',\n      new THREE.InstancedBufferAttribute(this.radii, 1, false, 1)\n    )\n    return geometry\n  }\n\n  getMesh = () => {\n    if (this.mesh != null) {\n      return this.mesh\n    }\n    const geometry = this.getGeometry()\n    const material = createMaterial('particle', vertexShader, fragmentShader)\n    this.mesh = new THREE.InstancedMesh(geometry, material, this.count)\n\n    const matrix = new THREE.Matrix4()\n    for (let i = 0; i < this.count; i++) {\n      this.mesh.setMatrixAt(i, matrix)\n      this.mesh.setColorAt(i, this.colors[i])\n    }\n    this.mesh.frustumCulled = false\n\n    return this.mesh\n  }\n}\n\nexport default Particles\n","export default /* glsl */ `\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\nuniform mat4 projectionMatrix;\nvarying vec4 v_position1;\nvarying vec4 v_position2;\nvarying vec4 U;\nvarying vec4 V;\nvarying vec4 axis;\nvarying float height;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tmat3 basis = mat3(U.xyz, V.xyz, axis.xyz);\n    vec3 surfacePoint = vec3(U.w, V.w, axis.w);\n    vec3 rayTarget = surfacePoint;\n\tvec3 rayDirection = normalize(rayTarget); // rayOrigin is (0,0,0) in camera space\n\n\tvec3 diff = rayTarget - v_position2.xyz;\n    vec3 E = diff * basis;\n    float L = height;\n    vec3 D = rayDirection * basis;\n\n    float R1 = v_position1.w;\n    float R2 = v_position2.w;\n    float dR = R2 - R1;\n\n    float a = dot(D.xy, D.xy);\n    float b = dot(E.xy, D.xy);\n    float c = dot(E.xy, E.xy)-R1*R1;\n    float L2Inv = 1.0/(L*L);\n\n\t// Calculate a dicriminant of the above quadratic equation (factor 2 removed from all b-terms above)\n    float d = b*b - a*c;\n\n    // d < 0.0 means the ray hits outside an infinitely long eccentric cone\n    if (d < 0.0) {\n\t\tdiscard;\n    }\n\n\tfloat sqrtd = sqrt(d);\n    float dist1 = (-b - sqrtd)/a;\n    float dist2 = (-b + sqrtd)/a;\n\n    // Make sure dist1 is the smaller one\n    if (dist2 < dist1) {\n      float tmp = dist1;\n      dist1 = dist2;\n      dist2 = tmp;\n    }\n\n\t// Check the smallest root, it is closest camera. Only test if the z-component is outside the truncated eccentric cone\n    float dist = dist1;\n    float intersectionPointZ = E.z + dist*D.z;\n    // Intersection point in camera space\n    vec3 p = rayTarget + dist*rayDirection;\n    bool isInner = false;\n\n    if (intersectionPointZ <= 0.0 ||\n      intersectionPointZ >= L\n      ) {\n      // Either intersection point is behind starting point (happens inside the cone),\n      // or the intersection point is outside the end caps. This is not a valid solution.\n      isInner = true;\n      dist = dist2;\n      intersectionPointZ = E.z + dist*D.z;\n      p = rayTarget + dist*rayDirection;\n\n      if (intersectionPointZ <= 0.0 ||\n        intersectionPointZ >= L\n      ) {\n        // Missed the other point too\n\t\tdiscard;\n      }\n    }\n\n\t// Find normal vector\n    vec3 n = normalize(-axis.xyz);\n    vec3 position1 = v_position1.xyz;\n    vec3 position2 = v_position2.xyz;\n    vec3 A = cross(position1 - p, position2 - p);\n\n    vec3 t = normalize(cross(n, A));\n    vec3 o1 = position1 + R1 * t;\n    vec3 o2 = position2 + R2 * t;\n    vec3 B = o2-o1;\n    normal = normalize(cross(A, B));\n\n#ifdef FRAG_DEPTH\n\tfloat projectedIntersection_z = projectionMatrix[0][2]*p.x + projectionMatrix[1][2]*p.y + projectionMatrix[2][2]*p.z + projectionMatrix[3][2];\n\tfloat projectedIntersection_w = projectionMatrix[0][3]*p.x + projectionMatrix[1][3]*p.y + projectionMatrix[2][3]*p.z + projectionMatrix[3][3];\n\tgl_FragDepthEXT = ((gl_DepthRange.diff * (projectedIntersection_z / projectedIntersection_w)) + gl_DepthRange.near + gl_DepthRange.far) * 0.5;\n#endif\n\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n  \n}\n\n`\n","export default /* glsl */ `\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\nuniform mat4 inverseModelMatrix;\nattribute vec3 position1;\nattribute vec3 position2;\nattribute float bondRadius;\n\nvarying vec4 v_position1;\nvarying vec4 v_position2;\n\n// U, V, axis represent the 3x3 cone basis.\n// They are vec4 to pack extra data into the w-component\n// since Safari on iOS only supports 8 varying vec4 registers.\nvarying vec4 U;\nvarying vec4 V;\nvarying vec4 axis;\nvarying float height;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvec3 mul3(mat4 M, vec3 v) {\n\tvec4 u = M * vec4(v, 1.0);\n\treturn u.xyz / u.w;\n}\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\n\tvec4 mvPosition = vec4( transformed, 1.0 );\n\n    // vec3 center = 0.5 * (position1 + position2);\n\tvec3 center = (inverseModelMatrix*vec4(0.5 * (position1 + position2), 1.0)).xyz;\n\theight = length(position2-position1);\n    vec3 newPosition = position;\n\t\n    vec3 objectToCameraModelSpace = (inverseModelMatrix*vec4(cameraPosition - center, 1.0)).xyz;\n\t\n    vec3 lDir = normalize(position1-position2);\n\tfloat dirSign = 1.0;\n    if (dot(objectToCameraModelSpace, lDir) < 0.0) { // direction vector looks away, flip it\n      dirSign = -1.0;\n      lDir *= -1.;\n    }\n\n    vec3 left = normalize(cross(objectToCameraModelSpace, lDir));\n    vec3 up = normalize(cross(left, lDir));\n\n\t// compute basis for cylinder\n    axis.xyz = lDir * dirSign;\n    U.xyz = cross(objectToCameraModelSpace, axis.xyz);\n    V.xyz = cross(U.xyz, axis.xyz);\n    // Transform to camera space\n    axis.xyz = normalize(normalMatrix * axis.xyz);\n    U.xyz = normalize(normalMatrix * U.xyz);\n    V.xyz = normalize(normalMatrix * V.xyz);\n\n\tv_position1.xyz = mul3(viewMatrix, mul3(modelMatrix, position1));\n    v_position2.xyz = mul3(viewMatrix, mul3(modelMatrix, position2));\n\n    // Pack radii as w components of v_centerA and v_centerB\n    v_position1.w = bondRadius;\n    v_position2.w = bondRadius;\n\n\tvec3 surfacePoint = center + mat3(0.5 * height * lDir, bondRadius * left, bondRadius * up) * newPosition;\n    transformed = surfacePoint;\n\n\tsurfacePoint = mul3(modelViewMatrix, surfacePoint);\n\n\t// We pack surfacePoint as w-components of U, V and axis\n    U.w = surfacePoint.x;\n    V.w = surfacePoint.y;\n    axis.w = surfacePoint.z;\n\n    mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n    gl_Position = projectionMatrix * mvPosition;\n\t\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n`\n","import * as THREE from 'three'\nimport fragmentShader from './fragment'\nimport vertexShader from './vertex'\nimport createMaterial from 'core/materials'\n\nclass Bonds {\n  positions1: Float32Array\n  positions2: Float32Array\n  indices: Float32Array\n  radii: Float32Array\n  colors: THREE.Color[]\n  count: number\n  capacity: number\n  mesh?: THREE.InstancedMesh\n\n  constructor(capacity: number) {\n    this.positions1 = new Float32Array(3 * capacity)\n    this.positions2 = new Float32Array(3 * capacity)\n    this.indices = new Float32Array(capacity)\n    this.radii = new Float32Array(capacity)\n    this.colors = []\n    this.count = 0\n    this.capacity = capacity\n    this.mesh = undefined\n  }\n\n  add(\n    x1: number,\n    y1: number,\n    z1: number,\n    x2: number,\n    y2: number,\n    z2: number,\n    radius: number,\n    r: number = 255.0,\n    g: number = 255.0,\n    b: number = 255.0\n  ) {\n    if (this.count === this.capacity) {\n      console.log(\"Warning, can't add particle because arrays are full\")\n      return\n    }\n\n    const index = this.count\n\n    this.positions1[3 * index + 0] = x1\n    this.positions1[3 * index + 1] = y1\n    this.positions1[3 * index + 2] = z1\n    this.positions2[3 * index + 0] = x2\n    this.positions2[3 * index + 1] = y2\n    this.positions2[3 * index + 2] = z2\n\n    this.colors.push(new THREE.Color(r / 255, g / 255, b / 255))\n\n    this.radii[index] = radius * 0.25\n    this.indices[index] = index\n\n    this.count += 1\n  }\n\n  getRadius = (index: number) => {\n    return this.radii[index]\n  }\n\n  getPosition1 = (index: number) => {\n    return new THREE.Vector3(\n      this.positions1[3 * index + 0],\n      this.positions1[3 * index + 1],\n      this.positions1[3 * index + 2]\n    )\n  }\n\n  getGeometry = () => {\n    const positions = []\n    positions.push(-1, 1, -1)\n    positions.push(-1, -1, -1)\n    positions.push(1, 1, -1)\n    positions.push(1, -1, -1)\n    positions.push(1, 1, 1)\n    positions.push(1, -1, 1)\n\n    const positionBufferAttribute = new THREE.BufferAttribute(\n      new Float32Array(positions),\n      3\n    )\n    const indexBufferAttribute = new THREE.BufferAttribute(\n      new Uint16Array([1, 2, 0, 1, 3, 2, 3, 4, 2, 3, 5, 4]),\n      1\n    )\n\n    const geometry = new THREE.InstancedBufferGeometry()\n\n    geometry.instanceCount = this.count\n    geometry.setIndex(indexBufferAttribute)\n    geometry.setAttribute('position', positionBufferAttribute)\n    geometry.setAttribute('normal', positionBufferAttribute)\n\n    geometry.setAttribute(\n      'position1',\n      new THREE.InstancedBufferAttribute(this.positions1, 3, false, 1)\n    )\n\n    geometry.setAttribute(\n      'position2',\n      new THREE.InstancedBufferAttribute(this.positions2, 3, false, 1)\n    )\n\n    geometry.setAttribute(\n      'bondRadius',\n      new THREE.InstancedBufferAttribute(this.radii, 1, false, 1)\n    )\n\n    return geometry\n  }\n\n  getMesh = () => {\n    if (this.mesh != null) {\n      return this.mesh\n    }\n\n    if (this.count === 0) {\n      return null\n    }\n\n    const geometry = this.getGeometry()\n    const material = createMaterial('bonds', vertexShader, fragmentShader)\n    this.mesh = new THREE.InstancedMesh(geometry, material, this.count)\n\n    const matrix = new THREE.Matrix4()\n    for (let i = 0; i < this.count; i++) {\n      this.mesh.setMatrixAt(i, matrix)\n      this.mesh.setColorAt(i, this.colors[i])\n    }\n    this.mesh.frustumCulled = false\n\n    return this.mesh\n  }\n}\n\nexport default Bonds\n","export interface Color {\n  r: number\n  g: number\n  b: number\n}\n\nexport interface AtomType {\n  fullname: string\n  shortname: string\n  radius: number\n  color: Color\n}\n\nconst AtomTypes: { [key: string]: AtomType } = {\n  H: {\n    shortname: 'H',\n    fullname: 'hydrogen',\n    radius: 1.2,\n    color: { r: 204, g: 204, b: 204 }\n  },\n  He: {\n    shortname: 'He',\n    fullname: 'helium',\n    radius: 1.4,\n    color: { r: 217, g: 255, b: 255 }\n  },\n  Li: {\n    shortname: 'Li',\n    fullname: 'lithium',\n    radius: 1.82,\n    color: { r: 204, g: 128, b: 255 }\n  },\n  Be: {\n    shortname: 'Be',\n    fullname: 'beryllium',\n    radius: 1.53,\n    color: { r: 194, g: 255, b: 0 }\n  },\n  B: {\n    shortname: 'B',\n    fullname: 'boron',\n    radius: 1.92,\n    color: { r: 255, g: 181, b: 181 }\n  },\n  C: {\n    shortname: 'C',\n    fullname: 'carbon',\n    radius: 1.7,\n    color: { r: 80, g: 80, b: 80 }\n  },\n  N: {\n    shortname: 'N',\n    fullname: 'nitrogen',\n    radius: 1.55,\n    color: { r: 48, g: 80, b: 248 }\n  },\n  O: {\n    shortname: 'O',\n    fullname: 'oxygen',\n    radius: 1.52,\n    color: { r: 170, g: 0, b: 0 }\n  },\n  F: {\n    shortname: 'F',\n    fullname: 'fluorine',\n    radius: 1.35,\n    color: { r: 144, g: 224, b: 80 }\n  },\n  Ne: {\n    shortname: 'Ne',\n    fullname: 'neon',\n    radius: 1.54,\n    color: { r: 48, g: 80, b: 248 }\n  },\n  Na: {\n    shortname: 'Na',\n    fullname: 'sodium',\n    radius: 2.27,\n    color: { r: 171, g: 92, b: 242 }\n  },\n  Mg: {\n    shortname: 'Mg',\n    fullname: 'magnesium',\n    radius: 1.73,\n    color: { r: 138, g: 255, b: 0 }\n  },\n  Al: {\n    shortname: 'Al',\n    fullname: 'aluminium',\n    radius: 1.84,\n    color: { r: 191, g: 166, b: 166 }\n  },\n  Si: {\n    shortname: 'Si',\n    fullname: 'silicon',\n    radius: 2.27,\n    color: { r: 240, g: 200, b: 160 }\n  },\n  P: {\n    shortname: 'P',\n    fullname: 'phosphorus',\n    radius: 1.8,\n    color: { r: 255, g: 128, b: 0 }\n  },\n  S: {\n    shortname: 'S',\n    fullname: 'sulfur',\n    radius: 1.8,\n    color: { r: 255, g: 255, b: 48 }\n  },\n  Cl: {\n    shortname: 'Cl',\n    fullname: 'chlorine',\n    radius: 1.75,\n    color: { r: 31, g: 240, b: 31 }\n  },\n  Ar: {\n    shortname: 'Ar',\n    fullname: 'argon',\n    radius: 1.88,\n    color: { r: 128, g: 209, b: 227 }\n  },\n  K: {\n    shortname: 'K',\n    fullname: 'potassium',\n    radius: 2.75,\n    color: { r: 143, g: 64, b: 212 }\n  },\n  Ca: {\n    shortname: 'Ca',\n    fullname: 'calcium',\n    radius: 2.31,\n    color: { r: 61, g: 255, b: 0 }\n  },\n  Sc: {\n    shortname: 'Sc',\n    fullname: 'scandium',\n    radius: 2.11,\n    color: { r: 230, g: 230, b: 230 }\n  },\n  Ti: {\n    shortname: 'Ti',\n    fullname: 'titanium',\n    radius: 2.0,\n    color: { r: 191, g: 194, b: 199 }\n  },\n  V: {\n    shortname: 'V',\n    fullname: 'vanadium',\n    radius: 2.0,\n    color: { r: 166, g: 166, b: 171 }\n  },\n  Cr: {\n    shortname: 'Cr',\n    fullname: 'chromium',\n    radius: 2.0,\n    color: { r: 138, g: 153, b: 199 }\n  },\n  Mn: {\n    shortname: 'Mn',\n    fullname: 'manganese',\n    radius: 2.0,\n    color: { r: 156, g: 122, b: 199 }\n  },\n  Fe: {\n    shortname: 'Fe',\n    fullname: 'iron',\n    radius: 2.0,\n    color: { r: 224, g: 102, b: 51 }\n  },\n  Co: {\n    shortname: 'Co',\n    fullname: 'cobalt',\n    radius: 2.0,\n    color: { r: 240, g: 144, b: 160 }\n  },\n  Ni: {\n    shortname: 'Ni',\n    fullname: 'nickel',\n    radius: 1.63,\n    color: { r: 80, g: 208, b: 80 }\n  },\n  Cu: {\n    shortname: 'Cu',\n    fullname: 'copper',\n    radius: 1.4,\n    color: { r: 200, g: 128, b: 51 }\n  },\n  Zn: {\n    shortname: 'Zn',\n    fullname: 'zinc',\n    radius: 1.39,\n    color: { r: 125, g: 128, b: 176 }\n  },\n  Ga: {\n    shortname: 'Ga',\n    fullname: 'gallium',\n    radius: 1.87,\n    color: { r: 194, g: 143, b: 143 }\n  },\n  Ge: {\n    shortname: 'Ge',\n    fullname: 'germanium',\n    radius: 2.11,\n    color: { r: 102, g: 143, b: 143 }\n  },\n  As: {\n    shortname: 'As',\n    fullname: 'arsenic',\n    radius: 1.85,\n    color: { r: 189, g: 128, b: 227 }\n  },\n  Se: {\n    shortname: 'Se',\n    fullname: 'selenium',\n    radius: 1.9,\n    color: { r: 255, g: 161, b: 0 }\n  },\n  Br: {\n    shortname: 'Br',\n    fullname: 'bromine',\n    radius: 1.85,\n    color: { r: 166, g: 41, b: 41 }\n  },\n  Kr: {\n    shortname: 'Kr',\n    fullname: 'krypton',\n    radius: 2.02,\n    color: { r: 92, g: 184, b: 209 }\n  },\n  Rb: {\n    shortname: 'Rb',\n    fullname: 'rubidium',\n    radius: 3.03,\n    color: { r: 112, g: 46, b: 176 }\n  },\n  Sr: {\n    shortname: 'Sr',\n    fullname: 'strontium',\n    radius: 2.49,\n    color: { r: 0, g: 255, b: 0 }\n  },\n  Y: {\n    shortname: 'Y',\n    fullname: 'yttrium',\n    radius: 2.0,\n    color: { r: 148, g: 255, b: 255 }\n  },\n  Zr: {\n    shortname: 'Zr',\n    fullname: 'zirconium',\n    radius: 2.0,\n    color: { r: 148, g: 224, b: 224 }\n  },\n  Nb: {\n    shortname: 'Nb',\n    fullname: 'niobium',\n    radius: 2.0,\n    color: { r: 115, g: 194, b: 201 }\n  },\n  Mo: {\n    shortname: 'Mo',\n    fullname: 'molybdenum',\n    radius: 2.0,\n    color: { r: 84, g: 181, b: 181 }\n  },\n  Tc: {\n    shortname: 'Tc',\n    fullname: 'technetium',\n    radius: 2.0,\n    color: { r: 59, g: 158, b: 158 }\n  },\n  Ru: {\n    shortname: 'Ru',\n    fullname: 'ruthenium',\n    radius: 2.0,\n    color: { r: 36, g: 143, b: 143 }\n  },\n  Rh: {\n    shortname: 'Rh',\n    fullname: 'rhodium',\n    radius: 2.0,\n    color: { r: 10, g: 125, b: 140 }\n  },\n  Pd: {\n    shortname: 'Pd',\n    fullname: 'palladium',\n    radius: 1.63,\n    color: { r: 0, g: 105, b: 133 }\n  },\n  Ag: {\n    shortname: 'Ag',\n    fullname: 'silver',\n    radius: 1.72,\n    color: { r: 192, g: 192, b: 192 }\n  },\n  Cd: {\n    shortname: 'Cd',\n    fullname: 'cadmium',\n    radius: 1.58,\n    color: { r: 255, g: 217, b: 143 }\n  },\n  In: {\n    shortname: 'In',\n    fullname: 'indium',\n    radius: 1.93,\n    color: { r: 166, g: 117, b: 115 }\n  },\n  Sn: {\n    shortname: 'Sn',\n    fullname: 'tin',\n    radius: 2.17,\n    color: { r: 102, g: 128, b: 128 }\n  },\n  Sb: {\n    shortname: 'Sb',\n    fullname: 'antimony',\n    radius: 2.06,\n    color: { r: 158, g: 99, b: 181 }\n  },\n  Te: {\n    shortname: 'Te',\n    fullname: 'tellurium',\n    radius: 2.06,\n    color: { r: 212, g: 122, b: 0 }\n  },\n  I: {\n    shortname: 'I',\n    fullname: 'iodine',\n    radius: 1.98,\n    color: { r: 148, g: 0, b: 148 }\n  },\n  Xe: {\n    shortname: 'Xe',\n    fullname: 'xenon',\n    radius: 2.16,\n    color: { r: 66, g: 158, b: 176 }\n  },\n  Cs: {\n    shortname: 'Cs',\n    fullname: 'caesium',\n    radius: 3.43,\n    color: { r: 87, g: 23, b: 143 }\n  },\n  Ba: {\n    shortname: 'Ba',\n    fullname: 'barium',\n    radius: 2.68,\n    color: { r: 0, g: 201, b: 0 }\n  },\n  La: {\n    shortname: 'La',\n    fullname: 'lanthanum',\n    radius: 2.0,\n    color: { r: 112, g: 212, b: 255 }\n  },\n  Ce: {\n    shortname: 'Ce',\n    fullname: 'cerium',\n    radius: 2.0,\n    color: { r: 255, g: 255, b: 199 }\n  },\n  Pr: {\n    shortname: 'Pr',\n    fullname: 'praseodymium',\n    radius: 2.0,\n    color: { r: 217, g: 255, b: 199 }\n  },\n  Nd: {\n    shortname: 'Nd',\n    fullname: 'neodymium',\n    radius: 2.0,\n    color: { r: 199, g: 255, b: 199 }\n  },\n  Pm: {\n    shortname: 'Pm',\n    fullname: 'promethium',\n    radius: 2.0,\n    color: { r: 163, g: 255, b: 199 }\n  },\n  Sm: {\n    shortname: 'Sm',\n    fullname: 'samarium',\n    radius: 2.0,\n    color: { r: 143, g: 255, b: 199 }\n  },\n  Eu: {\n    shortname: 'Eu',\n    fullname: 'europium',\n    radius: 2.0,\n    color: { r: 97, g: 255, b: 199 }\n  },\n  Gd: {\n    shortname: 'Gd',\n    fullname: 'gadolinium',\n    radius: 2.0,\n    color: { r: 69, g: 255, b: 199 }\n  },\n  Tb: {\n    shortname: 'Tb',\n    fullname: 'terbium',\n    radius: 2.0,\n    color: { r: 48, g: 255, b: 199 }\n  },\n  Dy: {\n    shortname: 'Dy',\n    fullname: 'dysprosium',\n    radius: 2.0,\n    color: { r: 31, g: 255, b: 199 }\n  },\n  Ho: {\n    shortname: 'Ho',\n    fullname: 'holmium',\n    radius: 2.0,\n    color: { r: 0, g: 255, b: 156 }\n  },\n  Er: {\n    shortname: 'Er',\n    fullname: 'erbium',\n    radius: 2.0,\n    color: { r: 0, g: 230, b: 117 }\n  },\n  Tm: {\n    shortname: 'Tm',\n    fullname: 'thulium',\n    radius: 2.0,\n    color: { r: 0, g: 212, b: 82 }\n  },\n  Yb: {\n    shortname: 'Yb',\n    fullname: 'ytterbium',\n    radius: 2.0,\n    color: { r: 0, g: 191, b: 56 }\n  },\n  Lu: {\n    shortname: 'Lu',\n    fullname: 'lutetium',\n    radius: 2.0,\n    color: { r: 0, g: 171, b: 36 }\n  },\n  Hf: {\n    shortname: 'Hf',\n    fullname: 'hafnium',\n    radius: 2.0,\n    color: { r: 77, g: 194, b: 255 }\n  },\n  Ta: {\n    shortname: 'Ta',\n    fullname: 'tantalum',\n    radius: 2.0,\n    color: { r: 77, g: 166, b: 255 }\n  },\n  W: {\n    shortname: 'W',\n    fullname: 'tungsten',\n    radius: 2.0,\n    color: { r: 33, g: 148, b: 214 }\n  }\n}\n\nexport default AtomTypes\n","import SimulationDataFrame from './simulationdataframe'\nimport Bonds from 'core/geometries/bonds/bonds'\n\nexport default class SimulationData {\n  frames: SimulationDataFrame[]\n  generateBondsFunction?: (frame: SimulationDataFrame) => Bonds\n  constructor() {\n    this.frames = []\n  }\n\n  getFrame = (index: number) => {\n    const frame = this.frames[index]\n    if (this.generateBondsFunction && frame.bonds == null) {\n      const bonds = this.generateBondsFunction(frame)\n      if (bonds.count > 0) {\n        frame.bonds = bonds\n      }\n    }\n\n    return frame\n  }\n\n  getNumFrames = () => {\n    return this.frames.length\n  }\n}\n","import * as THREE from 'three'\n\nexport default class SimulationCell {\n  vector1: THREE.Vector3\n  vector2: THREE.Vector3\n  vector3: THREE.Vector3\n  origin: THREE.Vector3\n  constructor(\n    vector1: THREE.Vector3,\n    vector2: THREE.Vector3,\n    vector3: THREE.Vector3,\n    origin: THREE.Vector3\n  ) {\n    this.vector1 = vector1\n    this.vector2 = vector2\n    this.vector3 = vector3\n    this.origin = origin\n  }\n\n  getCenter = () => {\n    const center = this.origin\n      .clone()\n      .add(this.vector1.clone().multiplyScalar(0.5))\n      .add(this.vector2.clone().multiplyScalar(0.5))\n      .add(this.vector3.clone().multiplyScalar(0.5))\n    return center\n  }\n\n  getOrigin = () => {\n    return this.origin.clone()\n  }\n\n  getBoundingBox = () => {\n    const box = new THREE.Box3()\n    box.expandByPoint(this.origin.clone().add(this.vector1))\n    box.expandByPoint(this.origin.clone().add(this.vector2))\n    box.expandByPoint(this.origin.clone().add(this.vector3))\n    box.expandByPoint(this.origin)\n    return box\n  }\n}\n","import * as THREE from 'three'\nimport Particles from 'core/geometries/particles/particles'\nimport Bonds from 'core/geometries/bonds/bonds'\nimport SimulationCell from './simulationcell'\n\nexport default class SimulationDataFrame {\n  simulationCell: SimulationCell\n  particleTypes: string[]\n  particles: Particles\n  bonds?: Bonds\n\n  constructor(particles: Particles, simulationCell?: SimulationCell) {\n    this.particles = particles\n\n    const particleTypeMap: { [key: string]: boolean } = {}\n    particles.types.forEach((particleType: string) => {\n      particleTypeMap[particleType] = true\n    })\n\n    // @ts-ignore\n    this.particleTypes = Object.keys(particleTypeMap)\n\n    if (simulationCell) {\n      this.simulationCell = simulationCell\n    } else {\n      this.simulationCell = this.generateSimulationCell()\n    }\n  }\n\n  generateSimulationCell = () => {\n    let box = new THREE.Box3()\n    for (let i = 0; i < this.particles.count; i++) {\n      box = box.expandByPoint(this.particles.getPosition(i))\n    }\n\n    const size = box.getSize(new THREE.Vector3())\n    const origin = box\n      .getCenter(new THREE.Vector3())\n      .sub(size.clone().multiplyScalar(0.5))\n    const simulationCell = new SimulationCell(\n      new THREE.Vector3(size.x, 0, 0),\n      new THREE.Vector3(0, size.y, 0),\n      new THREE.Vector3(0, 0, size.x),\n      origin\n    )\n    return simulationCell\n  }\n}\n","import Particles from 'core/geometries/particles/particles'\nimport AtomTypes from 'core/atomtypes'\nimport SimulationData from 'core/simulationdata/simulationdata'\nimport SimulationDataFrame from 'core/simulationdata/simulationdataframe'\n\nfunction addParticlesToFrame(lines: string[], i: number, particles: Particles) {\n  for (let j = 0; j < particles.capacity; j++) {\n    const lineData = lines[i + j].split(/\\s+/).filter(Boolean)\n    const element = lineData[0]\n\n    const atomType = AtomTypes[element]\n    let color = { r: 255, g: 102, b: 102 }\n    let radius = 1.0\n    if (atomType) {\n      radius = atomType.radius\n      color = atomType.color\n    }\n    const x = parseFloat(lineData[1])\n    const y = parseFloat(lineData[2])\n    const z = parseFloat(lineData[3])\n\n    particles.add({\n      x,\n      y,\n      z,\n      radius,\n      r: color.r,\n      g: color.g,\n      b: color.b,\n      type: atomType.shortname\n    })\n  }\n}\n\nconst parseXyz = (data: string): SimulationData => {\n  let particles: Particles | undefined\n  const frames: SimulationDataFrame[] = []\n\n  const lines = data.split('\\n')\n  const numLines = lines.length\n  let i = 0\n  let skipNextLine = false\n  let readNumParticles = true\n\n  while (i < numLines) {\n    if (lines[i] === '') {\n      i++\n      continue\n    }\n\n    if (skipNextLine) {\n      skipNextLine = false\n    } else if (readNumParticles) {\n      const numParticles = parseInt(lines[i], 10)\n\n      if (isNaN(numParticles)) {\n        console.log('Warning, got NaN as numParticles')\n        break\n      }\n\n      particles = new Particles(numParticles)\n      readNumParticles = false\n      skipNextLine = true\n    } else {\n      if (particles) {\n        addParticlesToFrame(lines, i, particles)\n        const frame = new SimulationDataFrame(particles)\n        frames.push(frame)\n        i += particles.count - 1\n        readNumParticles = true\n      }\n    }\n\n    i++\n  }\n\n  const simulationData = new SimulationData()\n  simulationData.frames = frames\n\n  return simulationData\n}\n\nexport default parseXyz\n","/**\n * @file Binary Heap\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\n * @private\n */\n\n/**\n * Binary heap implementation\n * @class\n * @author http://eloquentjavascript.net/appendix2.htm\n * @param {Function} scoreFunction - the heap scoring function\n */\nclass BinaryHeap<T> {\n  content: T[] = []\n\n  constructor(readonly scoreFunction: (x: T) => number) {\n    this.scoreFunction = scoreFunction\n  }\n\n  push(element: T) {\n    // Add the new element to the end of the array.\n    this.content.push(element)\n\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1)\n  }\n\n  pop() {\n    // Store the first element so we can return it later.\n    const result = this.content[0]\n\n    // Get the element at the end of the array.\n    const end = this.content.pop()\n\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (end && this.content.length > 0) {\n      this.content[0] = end\n      this.sinkDown(0)\n    }\n\n    return result\n  }\n\n  peek() {\n    return this.content[0]\n  }\n\n  remove(element: T) {\n    const len = this.content.length\n\n    // To remove a value, we must search through the array to find it.\n    for (let i = 0; i < len; i++) {\n      if (this.content[i] === element) {\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (end && i !== len - 1) {\n          this.content[i] = end\n\n          if (this.scoreFunction(end) < this.scoreFunction(element)) {\n            this.bubbleUp(i)\n          } else {\n            this.sinkDown(i)\n          }\n        }\n\n        return\n      }\n    }\n\n    throw new Error('Node not found.')\n  }\n\n  size() {\n    return this.content.length\n  }\n\n  bubbleUp(n: number) {\n    // Fetch the element that has to be moved.\n    const element = this.content[n]\n\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = Math.floor((n + 1) / 2) - 1\n      const parent = this.content[parentN]\n\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element\n        this.content[n] = parent\n\n        // Update 'n' to continue at the new position.\n        n = parentN\n      } else {\n        // Found a parent that is less, no need to move it further.\n        break\n      }\n    }\n  }\n\n  sinkDown(n: number) {\n    // Look up the target element and its score.\n    const length = this.content.length\n    const element = this.content[n]\n    const elemScore = this.scoreFunction(element)\n\n    let child1Score = 0\n    let child2Score = 0\n\n    while (true) {\n      // Compute the indices of the child elements.\n      const child2N = (n + 1) * 2\n      const child1N = child2N - 1\n\n      // This is used to store the new position of the element, if any.\n      let swap = null\n\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        const child1 = this.content[child1N]\n        child1Score = this.scoreFunction(child1)\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) swap = child1N\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        const child2 = this.content[child2N]\n        child2Score = this.scoreFunction(child2)\n\n        if (child2Score < (swap === null ? elemScore : child1Score))\n          swap = child2N\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap]\n        this.content[swap] = element\n        n = swap\n      } else {\n        // Otherwise, we are done.\n        break\n      }\n    }\n  }\n}\n\nexport default BinaryHeap\n","/**\n * @file Kdtree\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\n * @private\n */\n\nimport BinaryHeap from './binary-heap'\n\n/**\n * Kdtree\n * @class\n * @author Alexander Rose <alexander.rose@weirdbyte.de>, 2016\n * @author Roman Bolzern <roman.bolzern@fhnw.ch>, 2013\n * @author I4DS http://www.fhnw.ch/i4ds, 2013\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n * @description\n * k-d Tree for typed arrays of 3d points (e.g. for Float32Array), in-place\n * provides fast nearest neighbour search\n *\n * Based on https://github.com/ubilabs/kd-tree-javascript by Ubilabs\n *\n * Further information (including mathematical properties)\n * http://en.wikipedia.org/wiki/Binary_tree\n * http://en.wikipedia.org/wiki/K-d_tree\n *\n * @example\n * points: [x, y, z, x, y, z, x, y, z, ...]\n * metric: function(a, b){\n *    return Math.pow(a[0]-b[0], 2) + Math.pow(a[1]-b[1], 2) + Math.pow(a[2]-b[2], 2);\n * }\n *\n * @param {Float32Array} points - points\n * @param {Function} metric - metric\n */\n\nconst reusableArray = new Float32Array(3)\n\nclass Kdtree {\n  indices: Uint32Array\n  nodes: Int32Array\n  rootIndex: number\n\n  maxDepth = 0\n  currentNode = 0\n\n  constructor(\n    readonly points: Float32Array,\n    readonly metric: (a: Float32Array, b: Float32Array) => number\n  ) {\n    const n = points.length / 3\n\n    const indices = new Uint32Array(n)\n    for (let i = 0; i < n; ++i) {\n      indices[i] = i\n    }\n    this.indices = indices\n    this.nodes = new Int32Array(n * 4)\n    this.rootIndex = this.buildTree(0, -1, 0, n)\n  }\n\n  buildTree(depth: number, parent: number, arrBegin: number, arrEnd: number) {\n    if (depth > this.maxDepth) this.maxDepth = depth\n\n    const plength = arrEnd - arrBegin\n    if (plength === 0) {\n      return -1\n    }\n\n    const nodeIndex = this.currentNode * 4\n    const nodes = this.nodes\n\n    this.currentNode += 1\n    if (plength === 1) {\n      nodes[nodeIndex] = arrBegin\n      nodes[nodeIndex + 1] = -1\n      nodes[nodeIndex + 2] = -1\n      nodes[nodeIndex + 3] = parent\n      return nodeIndex\n    }\n    // if(plength <= 32){\n    //   return nodeIndex;\n    // }\n\n    const indices = this.indices\n    const points = this.points\n\n    const arrMedian = arrBegin + Math.floor(plength / 2)\n    const currentDim = depth % 3\n\n    // inlined quickselect function\n    let j, tmp, pivotIndex, pivotValue, storeIndex\n    let left = arrBegin\n    let right = arrEnd - 1\n    while (right > left) {\n      pivotIndex = (left + right) >> 1\n      pivotValue = points[indices[pivotIndex] * 3 + currentDim]\n      // swap( pivotIndex, right );\n      tmp = indices[pivotIndex]\n      indices[pivotIndex] = indices[right]\n      indices[right] = tmp\n      storeIndex = left\n      for (j = left; j < right; ++j) {\n        if (points[indices[j] * 3 + currentDim] < pivotValue) {\n          // swap( storeIndex, j );\n          tmp = indices[storeIndex]\n          indices[storeIndex] = indices[j]\n          indices[j] = tmp\n          ++storeIndex\n        }\n      }\n      // swap( right, storeIndex );\n      tmp = indices[right]\n      indices[right] = indices[storeIndex]\n      indices[storeIndex] = tmp\n      pivotIndex = storeIndex\n      if (arrMedian === pivotIndex) {\n        break\n      } else if (arrMedian < pivotIndex) {\n        right = pivotIndex - 1\n      } else {\n        left = pivotIndex + 1\n      }\n    }\n\n    nodes[nodeIndex] = arrMedian\n    nodes[nodeIndex + 1] = this.buildTree(\n      depth + 1,\n      nodeIndex,\n      arrBegin,\n      arrMedian\n    )\n    nodes[nodeIndex + 2] = this.buildTree(\n      depth + 1,\n      nodeIndex,\n      arrMedian + 1,\n      arrEnd\n    )\n    nodes[nodeIndex + 3] = parent\n\n    return nodeIndex\n  }\n\n  getNodeDepth(nodeIndex: number): number {\n    const parentIndex = this.nodes[nodeIndex + 3]\n    return parentIndex === -1 ? 0 : this.getNodeDepth(parentIndex) + 1\n  }\n\n  // TODO\n  // function getNodePos (node) {}\n\n  /**\n   * find nearest points\n   * @param {Array} point - array of size 3\n   * @param {Integer} maxNodes - max amount of nodes to return\n   * @param {Float} maxDistance - maximum distance of point to result nodes\n   * @return {Array} array of point, distance pairs\n   */\n  nearest(point: Float32Array, maxNodes: number, maxDistance: number) {\n    const bestNodes = new BinaryHeap<[number, number]>((e) => -e[1])\n\n    const nodes = this.nodes\n    const points = this.points\n    const indices = this.indices\n\n    const nearestSearch = (nodeIndex: number) => {\n      let bestChild, otherChild\n      const dimension = this.getNodeDepth(nodeIndex) % 3\n      const pointIndex = indices[nodes[nodeIndex]] * 3\n      const ownPoint = points.subarray(pointIndex, pointIndex + 3)\n      const ownDistance = this.metric(point, ownPoint)\n\n      function saveNode(nodeIndex: number, distance: number) {\n        bestNodes.push([nodeIndex, distance])\n        if (bestNodes.size() > maxNodes) {\n          bestNodes.pop()\n        }\n      }\n\n      const leftIndex = nodes[nodeIndex + 1]\n      const rightIndex = nodes[nodeIndex + 2]\n\n      // if it's a leaf\n      if (rightIndex === -1 && leftIndex === -1) {\n        if (\n          (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) &&\n          ownDistance <= maxDistance\n        ) {\n          saveNode(nodeIndex, ownDistance)\n        }\n        return\n      }\n\n      if (rightIndex === -1) {\n        bestChild = leftIndex\n      } else if (leftIndex === -1) {\n        bestChild = rightIndex\n      } else {\n        if (point[dimension] <= points[pointIndex + dimension]) {\n          bestChild = leftIndex\n        } else {\n          bestChild = rightIndex\n        }\n      }\n\n      // recursive search\n      nearestSearch(bestChild)\n\n      if (\n        (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) &&\n        ownDistance <= maxDistance\n      ) {\n        saveNode(nodeIndex, ownDistance)\n      }\n\n      // if there's still room or the current distance is nearer than the best distance\n      const linearPoint = reusableArray\n      for (let i = 0; i < 3; i += 1) {\n        if (i === dimension) {\n          linearPoint[i] = point[i]\n        } else {\n          linearPoint[i] = points[pointIndex + i]\n        }\n      }\n      const linearDistance = this.metric(linearPoint, ownPoint)\n\n      if (\n        (bestNodes.size() < maxNodes ||\n          Math.abs(linearDistance) < bestNodes.peek()[1]) &&\n        Math.abs(linearDistance) <= maxDistance\n      ) {\n        if (bestChild === leftIndex) {\n          otherChild = rightIndex\n        } else {\n          otherChild = leftIndex\n        }\n        if (otherChild !== -1) {\n          nearestSearch(otherChild)\n        }\n      }\n    }\n\n    nearestSearch(this.rootIndex)\n\n    const result = []\n    for (let i = 0, il = Math.min(bestNodes.size(), maxNodes); i < il; i += 1) {\n      result.push(bestNodes.content[i])\n    }\n\n    return result\n  }\n\n  verify(nodeIndex?: number, depth = 0) {\n    let count = 1\n\n    if (nodeIndex === undefined) {\n      nodeIndex = this.rootIndex\n    }\n\n    if (nodeIndex === -1) {\n      throw new Error('node is null')\n    }\n\n    const dim = depth % 3\n    const nodes = this.nodes\n    const points = this.points\n    const indices = this.indices\n\n    const leftIndex = nodes[nodeIndex + 1]\n    const rightIndex = nodes[nodeIndex + 2]\n\n    if (leftIndex !== -1) {\n      if (\n        points[indices[nodes[leftIndex]] * 3 + dim] >\n        points[indices[nodes[nodeIndex]] * 3 + dim]\n      ) {\n        throw new Error('left child is > parent!')\n      }\n      count += this.verify(leftIndex, depth + 1)\n    }\n\n    if (rightIndex !== -1) {\n      if (\n        points[indices[nodes[rightIndex]] * 3 + dim] <\n        points[indices[nodes[nodeIndex]] * 3 + dim]\n      ) {\n        throw new Error('right child is < parent!')\n      }\n      count += this.verify(rightIndex, depth + 1)\n    }\n\n    return count\n  }\n}\n\nexport default Kdtree\n","import SimulationDataFrame from 'core/simulationdata/simulationdataframe'\nimport Kdtree from './kdtree/kdtree'\nimport Bonds from 'core/geometries/bonds/bonds'\n\ntype CreateBondsByDistanceOptions = {\n  radius: number\n  pairDistances: { type1: string; type2: string; distance: number }[]\n}\n\nconst createBondsByDistance = ({\n  radius = 0.5,\n  pairDistances = []\n}: CreateBondsByDistanceOptions) => {\n  return (frame: SimulationDataFrame) => {\n    const particles = frame.particles\n    const distance = (a: Float32Array, b: Float32Array) => {\n      return (\n        Math.pow(a[0] - b[0], 2) +\n        Math.pow(a[1] - b[1], 2) +\n        Math.pow(a[2] - b[2], 2)\n      )\n    }\n\n    // Create map so we can do lookups like pairDistancesMap[\"H\"][\"O\"] to find 1.4\n    const pairDistancesMap: { [key: string]: { [key: string]: number } } = {}\n    pairDistances.forEach((pairDistance) => {\n      if (pairDistancesMap[pairDistance.type1] == null) {\n        pairDistancesMap[pairDistance.type1] = {}\n      }\n      if (pairDistancesMap[pairDistance.type2] == null) {\n        pairDistancesMap[pairDistance.type2] = {}\n      }\n\n      pairDistancesMap[pairDistance.type1][pairDistance.type2] =\n        pairDistance.distance\n      pairDistancesMap[pairDistance.type2][pairDistance.type1] =\n        pairDistance.distance\n    })\n    const pairs: { [key: string]: boolean } = {}\n\n    var tree = new Kdtree(\n      particles.positions.subarray(0, 3 * particles.count),\n      distance\n    )\n\n    const position1: THREE.Vector3[] = []\n    const position2: THREE.Vector3[] = []\n\n    for (let i = 0; i < particles.count; i++) {\n      const particle1Type = particles.getType(i)\n      if (pairDistancesMap[particle1Type] == null) {\n        // We have no bonds for this particle type\n        continue\n      }\n      const nearest = tree.nearest(\n        particles.positions.subarray(3 * i, 3 * (i + 1)),\n        4,\n        1.4\n      )\n      for (let j = 0; j < nearest.length; j++) {\n        const nodeIndex = nearest[j][0]\n        const index = tree.indices[tree.nodes[nodeIndex]]\n        if (index === i) {\n          // Skip ourselves, as we always will find that with distance zero\n          continue\n        }\n\n        const particle2Type = particles.getType(index)\n\n        if (pairDistancesMap[particle1Type][particle2Type] == null) {\n          // We have no bonds for this pair of particle types\n          continue\n        }\n\n        const distanceThreshold = pairDistancesMap[particle1Type][particle2Type]\n        const distance = nearest[j][1]\n        if (distance > distanceThreshold) {\n          // Particle pair is too far away\n          continue\n        }\n        const pairKey = index < i ? `${index}-${i}` : `${i}-${index}`\n\n        if (pairs[pairKey] == null) {\n          position1.push(particles.getPosition(i))\n          position2.push(particles.getPosition(index))\n          pairs[pairKey] = true\n        }\n      }\n    }\n\n    const bonds = new Bonds(position1.length)\n    for (let i = 0; i < position1.length; i++) {\n      bonds.add(\n        position1[i].x,\n        position1[i].y,\n        position1[i].z,\n        position2[i].x,\n        position2[i].y,\n        position2[i].z,\n        radius\n      )\n    }\n\n    return bonds\n  }\n}\n\nexport { createBondsByDistance }\n"],"names":["Material","materialType","parameters","uniforms","extensions","defines","copy","source","THREE","prototype","call","castedSource","type","onBeforeCompile","clone","material","materialMap","_fragDepthSupported","fragDepthSupported","undefined","renderer","gl","domElement","getContext","capabilities","isWebGL2","getExtension","dispose","createMaterial","vertexShader","fragmentShader","color","inverseModelMatrix","value","inverseNormalMatrix","fragDepth","FRAG_DEPTH","shader","Object","assign","toString","modelViewMatrix","normalMatrix","adjustCamera","camera","width","height","aspect","updateProjectionMatrix","Visualizer","object","materials","add","remove","ambientLight","directionalLight","scene","intensity","canvas","style","minWidth","minHeight","maxWidth","maxHeight","position","set","lookAt","matrixWorld","invert","matrixWorldInverse","multiply","getNormalMatrix","values","forEach","removeChild","controls","getState","target","setState","getCameraTarget","getCameraPosition","stats","begin","resizeIfNeeded","update","clock","getDelta","updateUniforms","render","end","latestRequestId","requestAnimationFrame","animate","bind","maxTextureSize","rendererSize","getSize","rendererPixelWidth","rendererPixelHeight","clientWidth","clientHeight","clientPixelWidth","window","devicePixelRatio","clientPixelHeight","clientTextureSize","scale","Math","sqrt","maxError","isOptimalSize","abs","setSize","appendChild","setupCanvas","setupLights","setupCamera","ComboControls","Stats","showPanel","document","body","dom","newVisualizer","OMOVIVisualizer","particles","bonds","cameraTarget","cameraPosition","useRef","useState","visualizer","setVisualizer","useEffect","current","prevParticlesRef","prevParticles","prevBondsRef","prevBonds","getMesh","setCameraTarget","setCameraPosition","console","log","React","ref","Particles","capacity","index","radii","positions","types","baseGeometry","geometry","instanceCount","count","setIndex","getIndex","setAttribute","getAttribute","mesh","getGeometry","matrix","i","setMatrixAt","setColorAt","colors","frustumCulled","Float32Array","indices","x","y","z","radius","r","g","b","push","Bonds","positions1","positionBufferAttribute","indexBufferAttribute","Uint16Array","positions2","x1","y1","z1","x2","y2","z2","AtomTypes","H","shortname","fullname","He","Li","Be","B","C","N","O","F","Ne","Na","Mg","Al","Si","P","S","Cl","Ar","K","Ca","Sc","Ti","V","Cr","Mn","Fe","Co","Ni","Cu","Zn","Ga","Ge","As","Se","Br","Kr","Rb","Sr","Y","Zr","Nb","Mo","Tc","Ru","Rh","Pd","Ag","Cd","In","Sn","Sb","Te","I","Xe","Cs","Ba","La","Ce","Pr","Nd","Pm","Sm","Eu","Gd","Tb","Dy","Ho","Er","Tm","Yb","Lu","Hf","Ta","W","SimulationData","frame","frames","generateBondsFunction","length","SimulationCell","vector1","vector2","vector3","origin","center","multiplyScalar","box","expandByPoint","SimulationDataFrame","simulationCell","getPosition","size","getCenter","sub","particleTypeMap","particleType","particleTypes","keys","generateSimulationCell","addParticlesToFrame","lines","j","lineData","split","filter","Boolean","element","atomType","parseFloat","parseXyz","data","numLines","skipNextLine","readNumParticles","numParticles","parseInt","isNaN","simulationData","BinaryHeap","scoreFunction","content","bubbleUp","pop","result","sinkDown","peek","len","Error","n","parentN","floor","parent","elemScore","child1Score","child2Score","child2N","child1N","swap","child1","child2","reusableArray","Kdtree","points","metric","Uint32Array","nodes","Int32Array","rootIndex","buildTree","depth","arrBegin","arrEnd","maxDepth","plength","nodeIndex","currentNode","arrMedian","currentDim","tmp","pivotIndex","pivotValue","storeIndex","left","right","getNodeDepth","parentIndex","nearest","point","maxNodes","maxDistance","bestNodes","e","nearestSearch","bestChild","otherChild","dimension","pointIndex","ownPoint","subarray","ownDistance","saveNode","distance","leftIndex","rightIndex","linearPoint","linearDistance","il","min","verify","dim","createBondsByDistance","pairDistances","a","pow","pairDistancesMap","pairDistance","type1","type2","pairs","tree","position1","position2","particle1Type","getType","particle2Type","distanceThreshold","pairKey"],"mappings":"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"}