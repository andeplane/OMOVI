{"version":3,"sources":["FileUpload.tsx","../../src/core/materials.ts","../../src/OMOVIVisualizer.tsx","../../src/core/visualizer.ts","../../src/core/geometries/particles/particles.ts","../../src/core/geometries/particles/fragment.ts","../../src/core/geometries/bonds/bonds.ts","../../src/core/geometries/bonds/fragment.ts","../../src/core/atomtypes.ts","../../src/core/simulationdata/simulationdata.ts","../../src/core/simulationdata/simulationcell.ts","../../src/core/simulationdata/simulationdataframe.ts","../../src/parsers/xyzparser.ts","../../src/utils/kdtree/binary-heap.ts","../../src/utils/kdtree/kdtree.ts","../../src/utils/bondcreators.ts","PlayControls.tsx","SimulationDataVisualizer.tsx","App.tsx","hooks/simulation.ts","index.tsx"],"names":["FileUpload","onFileUploaded","domElement","useRef","showDropZone","useCallback","current","style","display","hideDropZone","allowDrag","e","dataTransfer","dropEffect","preventDefault","handleDrop","a","files","length","filename","name","text","data","useEffect","window","addEventListener","ref","className","id","Material","copy","THREE","castedSource","this","clone","material","materialMap","createMaterial","color","value","_fragDepthSupported","renderer","gl","fragDepthSupported","Object","shader","inverseModelMatrix","modelViewMatrix","normalMatrix","inverseNormalMatrix","Visualizer","add","object","materialType","remove","setupLights","ambientLight","directionalLight","scene","setupCanvas","canvas","setupCamera","camera","updateUniforms","dispose","getCameraPosition","getCameraTarget","setCameraPosition","setCameraTarget","animate","requestAnimationFrame","resizeIfNeeded","rendererSize","rendererPixelWidth","rendererPixelHeight","clientWidth","clientHeight","clientPixelWidth","clientPixelHeight","clientTextureSize","scale","Math","width","height","adjustCamera","document","cpuStats","memoryStats","OMOVIVisualizer","particles","bonds","cameraTarget","cameraPosition","useState","visualizer","setVisualizer","newVisualizer","prevParticlesRef","prevParticles","prevBondsRef","prevBonds","console","Particles","getRadius","getPosition","index","getType","getGeometry","baseGeometry","geometry","getMesh","matrix","i","Float32Array","x","y","z","radius","type","r","g","b","count","Bonds","getPosition1","positions","positionBufferAttribute","indexBufferAttribute","Uint16Array","AtomTypes","H","shortname","fullname","He","Li","Be","B","C","N","O","F","Ne","Na","Mg","Al","Si","P","S","Cl","Ar","K","Ca","Sc","Ti","V","Cr","Mn","Fe","Co","Ni","Cu","Zn","Ga","Ge","As","Se","Br","Kr","Rb","Sr","Y","Zr","Nb","Mo","Tc","Ru","Rh","Pd","Ag","Cd","In","Sn","Sb","Te","I","Xe","Cs","Ba","La","Ce","Pr","Nd","Pm","Sm","Eu","Gd","Tb","Dy","Ho","Er","Tm","Yb","Lu","Hf","Ta","W","SimulationData","getFrame","frame","getNumFrames","SimulationCell","getCenter","getOrigin","getBoundingBox","box","SimulationDataFrame","generateSimulationCell","size","origin","particleTypeMap","addParticlesToFrame","lines","j","lineData","element","atomType","parseFloat","parseXyz","frames","numLines","skipNextLine","readNumParticles","numParticles","parseInt","isNaN","simulationData","BinaryHeap","scoreFunction","content","push","pop","result","end","peek","len","Error","bubbleUp","n","parentN","parent","sinkDown","elemScore","child1Score","child2N","child1N","swap","child1","child2","child2Score","reusableArray","Kdtree","points","metric","maxDepth","currentNode","indices","Uint32Array","Int32Array","buildTree","depth","plength","arrEnd","nodeIndex","nodes","arrMedian","arrBegin","currentDim","left","right","pivotValue","pivotIndex","tmp","storeIndex","getNodeDepth","parentIndex","nearest","bestNodes","nearestSearch","dimension","pointIndex","ownPoint","ownDistance","leftIndex","rightIndex","bestChild","point","saveNode","linearPoint","linearDistance","otherChild","il","verify","dim","createBondsByDistance","pairDistances","pairDistancesMap","pairDistance","pairs","tree","position1","position2","particle1Type","particle2Type","distanceThreshold","pairKey","Container","styled","div","PlayControls","numFrames","onFrameChanged","playing","isPlaying","setIsPlaying","setFrame","mouseDown","setMouseDown","onFrameChangedCB","toggleIsPlaying","handleMouseDown","onMouseUp","ev","removeEventListener","handleKeyDown","keyCode","interval","setInterval","nextFrame","clearInterval","placement","closable","visible","mask","flex","onMouseDown","onClick","log","defaultValue","max","onChange","PauseOutlined","fontSize","CaretRightOutlined","SimulationDataVisualizer","simulationCell","center","boundingBox","position","sub","multiplyScalar","currentFrame","newFrame","Header","Layout","Content","Sider","SubMenu","Menu","App","setSimulationData","fileName","setFileName","loadSimulation","url","onFileLoaded","fetch","file","contents","loadWater","createBondsFunction","type1","type2","distance","generateBondsFunction","minHeight","theme","defaultOpenKeys","defaultSelectedKeys","mode","key","icon","DotChartOutlined","title","Item","padding","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.29e3edde.chunk.js","sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react'\n// Based on https://codepen.io/nekobog/pen/JjoZvBm\n\nconst FileUpload = ({ onFileUploaded }: { onFileUploaded: (filename: string, contents: string) => void }) => {\n    const domElement = useRef<HTMLDivElement | null>(null);\n\n    const showDropZone = useCallback(() => {\n        if (domElement.current) {\n            domElement.current.style.display = \"block\";\n        }\n    }, [])\n\n    const hideDropZone = useCallback(() => {\n        if (domElement.current) {\n            domElement.current.style.display = \"none\";\n        }\n    }, [])\n\n    const allowDrag = useCallback((e: DragEvent) => {\n        if (true) {  // Test that the item being dragged is a valid one\n            e.dataTransfer!.dropEffect = 'copy';\n            e.preventDefault();\n        }\n    }, [])\n\n    const handleDrop = useCallback(async (e: DragEvent) => {\n        e.preventDefault();\n        hideDropZone();\n        const files = e.dataTransfer?.files\n        if (files && files.length > 0) {\n            const filename = files[0].name\n            const data = await files[0].text()\n            onFileUploaded(filename, data)\n        }\n\n    }, [hideDropZone, onFileUploaded])\n\n    useEffect(() => {\n        if (domElement.current) {\n            window.addEventListener('dragenter', function (e) {\n                showDropZone();\n            });\n\n            domElement.current.addEventListener('dragenter', allowDrag);\n            domElement.current.addEventListener('dragover', allowDrag);\n\n            domElement.current.addEventListener('dragleave', function (e) {\n                hideDropZone();\n            });\n\n            domElement.current.addEventListener('drop', handleDrop);\n        }\n\n    }, [allowDrag, domElement, handleDrop, hideDropZone, showDropZone])\n\n    return (\n        <div ref={domElement} className=\"dropzone\" id=\"dropzone\" />\n    )\n}\n\nexport default FileUpload","import * as THREE from 'three'\n\nexport interface Uniforms {\n  [name: string]: THREE.IUniform\n}\n\nexport interface Extensions {\n  fragDepth?: boolean\n}\n\nclass Material extends THREE.MeshPhongMaterial {\n  materialType: string\n  uniforms: Uniforms\n  extensions: Extensions\n\n  constructor(\n    materialType: string,\n    parameters?: THREE.MeshPhongMaterialParameters\n  ) {\n    super(parameters)\n    // @ts-ignore\n    this.materialType = materialType\n    this.uniforms = {}\n    this.extensions = {}\n    this.defines = {}\n  }\n\n  copy(source: THREE.Material): this {\n    THREE.MeshPhongMaterial.prototype.copy.call(this, source)\n    const castedSource = source as Material\n    this.type = castedSource.type\n    this.defines = { ...castedSource.defines }\n    this.extensions = castedSource.extensions\n    this.uniforms = castedSource.uniforms\n    this.onBeforeCompile = castedSource.onBeforeCompile\n    return this\n  }\n\n  clone(): this {\n    // three.js uses \"this\" for no good reason, and we need to match that\n    const material = new THREE.MeshPhongMaterial()\n    Material.prototype.copy.call(material, this)\n    return material as this\n  }\n}\n\nconst materialMap: { [key: string]: Material } = {}\nlet _fragDepthSupported: boolean | undefined\n\nfunction fragDepthSupported() {\n  if (_fragDepthSupported !== undefined) {\n    return _fragDepthSupported\n  }\n\n  const renderer = new THREE.WebGLRenderer()\n  const gl = renderer.domElement.getContext('webgl')\n\n  if (\n    renderer.capabilities.isWebGL2 ||\n    (gl != null && gl.getExtension('EXT_frag_depth') != null)\n  ) {\n    _fragDepthSupported = true\n  } else {\n    _fragDepthSupported = false\n  }\n\n  renderer.dispose()\n\n  return _fragDepthSupported\n}\n\nconst createMaterial = (\n  type: string,\n  vertexShader: string,\n  fragmentShader: string\n) => {\n  if (materialMap[type] != null) {\n    return materialMap[type]\n  }\n\n  const material = new Material(type, { color: 0xffffff })\n  material.uniforms.inverseModelMatrix = { value: new THREE.Matrix4() }\n  material.uniforms.inverseNormalMatrix = { value: new THREE.Matrix3() }\n\n  if (fragDepthSupported()) {\n    material.extensions.fragDepth = true\n    material.defines!.FRAG_DEPTH = 1\n  }\n\n  material.onBeforeCompile = (shader: THREE.Shader) => {\n    Object.assign(shader.uniforms, material.uniforms)\n    material.uniforms = shader.uniforms\n\n    shader.vertexShader = vertexShader\n    shader.fragmentShader = fragmentShader\n  }\n\n  // Necessary because of a bug in THREE.JS\n  // https://github.com/mrdoob/three.js/issues/15948\n  material.onBeforeCompile.toString = () => type\n\n  materialMap[type] = material\n  return material\n}\n\nexport default createMaterial\nexport { Material }\n","import React, { useEffect, useState, useRef } from 'react'\nimport Visualizer from './core/visualizer'\nimport Particles from './core/geometries/particles/particles'\nimport Bonds from './core/geometries/bonds/bonds'\n\nlet newVisualizer: Visualizer | undefined\n\nconst OMOVIVisualizer = ({\n  particles,\n  bonds,\n  cameraTarget,\n  cameraPosition\n}: {\n  particles?: Particles\n  bonds?: Bonds\n  cameraTarget?: THREE.Vector3\n  cameraPosition?: THREE.Vector3\n}) => {\n  const domElement = useRef<HTMLDivElement | null>(null)\n  const [visualizer, setVisualizer] = useState<Visualizer | undefined>(\n    undefined\n  )\n\n  useEffect(() => {\n    if (domElement.current && !newVisualizer) {\n      newVisualizer = new Visualizer(domElement.current)\n      setVisualizer(newVisualizer)\n    }\n  }, [domElement, visualizer])\n\n  const prevParticlesRef = useRef<Particles>()\n  useEffect(() => {\n    prevParticlesRef.current = particles\n  })\n  const prevParticles = prevParticlesRef.current\n\n  const prevBondsRef = useRef<Bonds>()\n  useEffect(() => {\n    prevBondsRef.current = bonds\n  })\n  const prevBonds = prevBondsRef.current\n\n  useEffect(() => {\n    if (!visualizer) {\n      return\n    }\n\n    if (prevParticles) {\n      visualizer.remove(prevParticles.getMesh())\n    }\n    if (particles) {\n      visualizer.add(particles.getMesh())\n    }\n\n    if (prevBonds) {\n      visualizer.remove(prevBonds.getMesh()!)\n    }\n    if (bonds) {\n      visualizer.add(bonds.getMesh()!)\n    }\n  }, [particles, bonds, visualizer])\n\n  useEffect(() => {\n    if (visualizer) {\n      if (cameraTarget) {\n        visualizer.setCameraTarget(cameraTarget)\n      }\n    }\n  }, [cameraTarget, visualizer])\n\n  useEffect(() => {\n    if (visualizer) {\n      if (cameraPosition) {\n        visualizer.setCameraPosition(cameraPosition)\n      }\n    }\n  }, [cameraPosition, visualizer])\n\n  useEffect(() => {\n    console.log('Will create visualizer')\n    return () => {\n      console.log('Should dispose visualizer')\n      // visualizer.dispose()\n      newVisualizer = undefined\n    }\n  }, [])\n\n  return (\n    <div style={{ height: '100%', width: '100%' }}>\n      <div style={{ height: '100%', width: '100%' }} ref={domElement} />\n    </div>\n  )\n}\nexport default OMOVIVisualizer\n","import * as THREE from 'three'\nimport ComboControls from '@cognite/three-combo-controls'\nimport { Material } from './materials'\n\n// @ts-ignore\nimport Stats from 'stats.js'\n\nconst inverseModelMatrix = new THREE.Matrix4()\nconst modelViewMatrix = new THREE.Matrix4()\nconst normalMatrix = new THREE.Matrix3()\nconst inverseNormalMatrix = new THREE.Matrix3()\n\nconst adjustCamera = (\n  camera: THREE.PerspectiveCamera,\n  width: number,\n  height: number\n) => {\n  if (camera instanceof THREE.PerspectiveCamera) {\n    camera.aspect = width / height\n  }\n  camera.updateProjectionMatrix()\n}\n\nexport default class Visualizer {\n  private renderer: THREE.WebGLRenderer\n  private canvas: HTMLCanvasElement\n  public scene: THREE.Scene\n  private camera: THREE.PerspectiveCamera\n  private ambientLight: THREE.AmbientLight\n  private directionalLight: THREE.DirectionalLight\n  private controls: ComboControls\n  private clock: THREE.Clock\n  private domElement: HTMLElement\n  private object: THREE.Object3D\n  private stats: Stats\n  private cpuStats: Stats\n  private memoryStats: Stats\n  private materials: { [key: string]: Material }\n\n  // @ts-ignore\n  private latestRequestId?: number\n\n  constructor(domElement: HTMLElement) {\n    this.renderer = new THREE.WebGLRenderer()\n\n    this.canvas = this.renderer.domElement\n    this.domElement = domElement\n    this.domElement.appendChild(this.canvas)\n    this.setupCanvas(this.canvas)\n\n    this.scene = new THREE.Scene()\n\n    this.ambientLight = new THREE.AmbientLight(0xffffff)\n    this.directionalLight = new THREE.DirectionalLight(0xffffff)\n    this.setupLights(this.ambientLight, this.directionalLight, this.scene)\n\n    this.camera = new THREE.PerspectiveCamera(60, 640 / 480, 0.1, 10000)\n    this.setupCamera(this.camera)\n    this.controls = new ComboControls(this.camera, this.canvas)\n\n    this.latestRequestId = undefined\n    this.clock = new THREE.Clock()\n    this.object = new THREE.Object3D()\n    this.scene.add(this.object)\n\n    this.cpuStats = new Stats()\n    this.memoryStats = new Stats()\n    this.cpuStats.showPanel(0) // 0: fps, 1: ms, 2: mb, 3+: custom\n    this.memoryStats.showPanel(2) // 0: fps, 1: ms, 2: mb, 3+: custom\n    document.body.appendChild(this.cpuStats.dom)\n    this.cpuStats.domElement.style.cssText =\n      'position:absolute;top:0px;right:80px;'\n    this.memoryStats.domElement.style.cssText =\n      'position:absolute;top:0px;right:0px;'\n    document.body.appendChild(this.memoryStats.dom)\n\n    this.materials = {}\n    this.animate()\n  }\n\n  add = (object: THREE.Mesh) => {\n    if (object == null) {\n      return\n    }\n\n    if (object.material instanceof Material) {\n      const material = object.material as Material\n      const materialType = material.type\n      if (this.materials[materialType] == null) {\n        this.materials[materialType] = material\n      }\n    }\n\n    this.object.add(object)\n  }\n\n  remove = (object: THREE.Mesh) => {\n    this.object.remove(object)\n  }\n\n  setupLights = (\n    ambientLight: THREE.AmbientLight,\n    directionalLight: THREE.DirectionalLight,\n    scene: THREE.Scene\n  ) => {\n    ambientLight.intensity = 0.3\n    directionalLight.intensity = 0.7\n    scene.add(directionalLight)\n    scene.add(ambientLight)\n  }\n\n  setupCanvas = (canvas: HTMLCanvasElement) => {\n    canvas.style.width = '640px'\n    canvas.style.height = '480px'\n    canvas.style.minWidth = '100%'\n    canvas.style.minHeight = '100%'\n    canvas.style.maxWidth = '100%'\n    canvas.style.maxHeight = '100%'\n  }\n\n  setupCamera = (camera: THREE.PerspectiveCamera) => {\n    camera.position.set(10, 10, 10)\n    camera.lookAt(new THREE.Vector3(0, 0, 0))\n  }\n\n  updateUniforms = (camera: THREE.PerspectiveCamera) => {\n    this.object.matrixWorld.copy(this.object.matrixWorld).invert()\n    modelViewMatrix\n      .copy(camera.matrixWorldInverse)\n      .multiply(this.object.matrixWorld)\n    normalMatrix.getNormalMatrix(modelViewMatrix)\n    inverseNormalMatrix.copy(normalMatrix).invert()\n\n    Object.values(this.materials).forEach((material) => {\n      if (material.uniforms.inverseModelMatrix != null) {\n        material.uniforms.inverseModelMatrix.value.copy(inverseModelMatrix)\n      }\n      if (material.uniforms.inverseNormalMatrix != null) {\n        material.uniforms.inverseNormalMatrix.value.copy(inverseNormalMatrix)\n      }\n    })\n  }\n\n  dispose = () => {\n    this.domElement.removeChild(this.canvas)\n    this.renderer.dispose()\n  }\n\n  getCameraPosition = () => {\n    return this.controls.getState().position\n  }\n\n  getCameraTarget = () => {\n    return this.controls.getState().target\n  }\n\n  setCameraPosition = (position: THREE.Vector3) => {\n    this.controls.setState(position, this.getCameraTarget())\n  }\n\n  setCameraTarget = (target: THREE.Vector3) => {\n    this.controls.setState(this.getCameraPosition(), target)\n  }\n\n  animate = () => {\n    this.memoryStats.update()\n    this.cpuStats.begin()\n    this.resizeIfNeeded()\n    this.controls.update(this.clock.getDelta())\n\n    this.updateUniforms(this.camera)\n    this.renderer.render(this.scene, this.camera)\n    this.cpuStats.end()\n\n    this.latestRequestId = requestAnimationFrame(this.animate.bind(this))\n    // console.log(this.camera.position.clone())\n  }\n\n  resizeIfNeeded = () => {\n    // The maxTextureSize is chosen from testing on low-powered hardware,\n    // and could be increased in the future.\n    // TODO Increase maxTextureSize if SSAO performance is improved\n    const maxTextureSize = 1.4e6\n\n    const rendererSize = this.renderer.getSize(new THREE.Vector2())\n    const rendererPixelWidth = rendererSize.width\n    const rendererPixelHeight = rendererSize.height\n\n    // client width and height are in virtual pixels and not yet scaled by dpr\n    // TODO VERSION 5.0.0 remove the test for dom element size once we have removed the getCanvas function\n    const clientWidth =\n      this.domElement.clientWidth !== 0\n        ? this.domElement.clientWidth\n        : this.canvas.clientWidth\n    const clientHeight =\n      this.domElement.clientHeight !== 0\n        ? this.domElement.clientHeight\n        : this.canvas.clientHeight\n    const clientPixelWidth = window.devicePixelRatio * clientWidth\n    const clientPixelHeight = window.devicePixelRatio * clientHeight\n    const clientTextureSize = clientPixelWidth * clientPixelHeight\n\n    const scale =\n      clientTextureSize > maxTextureSize\n        ? Math.sqrt(maxTextureSize / clientTextureSize)\n        : 1\n\n    const width = clientPixelWidth * scale\n    const height = clientPixelHeight * scale\n\n    const maxError = 0.1 // pixels\n    const isOptimalSize =\n      Math.abs(rendererPixelWidth - width) < maxError &&\n      Math.abs(rendererPixelHeight - height) < maxError\n\n    if (isOptimalSize) {\n      return false\n    }\n\n    this.renderer.setSize(width, height)\n\n    adjustCamera(this.camera, width, height)\n\n    return true\n  }\n}\n","import * as THREE from 'three'\nimport fragmentShader from './fragment'\nimport vertexShader from './vertex'\nimport createMaterial from 'core/materials'\n\nclass Particles {\n  types: string[]\n  positions: Float32Array\n  indices: Float32Array\n  radii: Float32Array\n  colors: THREE.Color[]\n  count: number\n  capacity: number\n  mesh?: THREE.InstancedMesh\n\n  constructor(capacity: number) {\n    this.types = []\n    this.positions = new Float32Array(3 * capacity)\n    this.indices = new Float32Array(capacity)\n    this.radii = new Float32Array(capacity)\n    this.colors = []\n    this.count = 0\n    this.capacity = capacity\n    this.mesh = undefined\n  }\n\n  add({\n    x,\n    y,\n    z,\n    radius,\n    type = 'H',\n    r = 255.0,\n    g = 0.0,\n    b = 0.0\n  }: {\n    x: number\n    y: number\n    z: number\n    radius: number\n    type: string\n    r: number\n    g: number\n    b: number\n  }) {\n    if (this.count === this.capacity) {\n      console.log(\"Warning, can't add particle because arrays are full\")\n      return\n    }\n\n    const index = this.count\n\n    this.positions[3 * index + 0] = x\n    this.positions[3 * index + 1] = y\n    this.positions[3 * index + 2] = z\n    this.colors.push(new THREE.Color(r / 255, g / 255, b / 255))\n    this.radii[index] = radius * 0.25\n    this.indices[index] = index\n    this.types.push(type)\n\n    this.count += 1\n  }\n\n  getRadius = (index: number) => {\n    return this.radii[index]\n  }\n\n  getPosition = (index: number) => {\n    return new THREE.Vector3(\n      this.positions[3 * index + 0],\n      this.positions[3 * index + 1],\n      this.positions[3 * index + 2]\n    )\n  }\n\n  getType = (index: number) => {\n    return this.types[index]\n  }\n\n  getGeometry = () => {\n    const baseGeometry = new THREE.PlaneBufferGeometry(1, 1, 1, 1)\n    const geometry = new THREE.InstancedBufferGeometry()\n\n    geometry.instanceCount = this.count\n    geometry.setIndex(baseGeometry.getIndex())\n    geometry.setAttribute('position', baseGeometry.getAttribute('position'))\n    geometry.setAttribute('normal', baseGeometry.getAttribute('normal'))\n\n    geometry.setAttribute(\n      'particlePosition',\n      new THREE.InstancedBufferAttribute(this.positions, 3, false, 1)\n    )\n    geometry.setAttribute(\n      'particleRadius',\n      new THREE.InstancedBufferAttribute(this.radii, 1, false, 1)\n    )\n    return geometry\n  }\n\n  getMesh = () => {\n    if (this.mesh != null) {\n      return this.mesh\n    }\n    const geometry = this.getGeometry()\n    const material = createMaterial('particle', vertexShader, fragmentShader)\n    this.mesh = new THREE.InstancedMesh(geometry, material, this.count)\n\n    const matrix = new THREE.Matrix4()\n    for (let i = 0; i < this.count; i++) {\n      this.mesh.setMatrixAt(i, matrix)\n      this.mesh.setColorAt(i, this.colors[i])\n    }\n    this.mesh.frustumCulled = false\n\n    return this.mesh\n  }\n}\n\nexport default Particles\n","export default /* glsl */ `\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\nuniform mat4 projectionMatrix;\nvarying vec3 vSurfacePoint;\nvarying vec3 vCenter;\nvarying float vRadius;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tvec3 rayTarget = vSurfacePoint;\n\tvec3 rayDirection = normalize(rayTarget); // rayOrigin is (0,0,0) in camera space\n\n\tvec3 diff = rayTarget - vCenter.xyz;\n    vec3 E = diff;\n    vec3 D = rayDirection;\n\n    float a = dot(D, D);\n    float b = dot(E, D);\n    float c = dot(E, E) - vRadius*vRadius;\n\n    // discriminant of sphere equation (factor 2 removed from b above)\n    float d = b*b - a*c;\n    if(d < 0.0)\n        discard;\n\t\n    float sqrtd = sqrt(d);\n    float dist1 = (-b - sqrtd)/a;\n    float dist2 = (-b + sqrtd)/a;\n\n    // Make sure dist1 is the smaller one\n    if (dist2 < dist1) {\n        float tmp = dist1;\n        dist1 = dist2;\n        dist2 = tmp;\n    }\n\n    float dist = dist1;\n    float intersectionPointZ = E.z + dist*D.z;\n\tvec3 p = rayTarget + dist*rayDirection;\n\n\t// Find normal vector in local space\n    normal = normalize(vec3(p - vCenter.xyz));\n    // Transform into camera space\n    if (dot(normal, rayDirection) >  0.) {\n        normal = -normal;\n    }\n\n#ifdef FRAG_DEPTH\n\tfloat projectedIntersection_z = projectionMatrix[0][2]*p.x + projectionMatrix[1][2]*p.y + projectionMatrix[2][2]*p.z + projectionMatrix[3][2];\n\tfloat projectedIntersection_w = projectionMatrix[0][3]*p.x + projectionMatrix[1][3]*p.y + projectionMatrix[2][3]*p.z + projectionMatrix[3][3];\n\tgl_FragDepthEXT = ((gl_DepthRange.diff * (projectedIntersection_z / projectedIntersection_w)) + gl_DepthRange.near + gl_DepthRange.far) * 0.5;\n#endif\n\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n`\n","import * as THREE from 'three'\nimport fragmentShader from './fragment'\nimport vertexShader from './vertex'\nimport createMaterial from 'core/materials'\n\nclass Bonds {\n  positions1: Float32Array\n  positions2: Float32Array\n  indices: Float32Array\n  radii: Float32Array\n  colors: THREE.Color[]\n  count: number\n  capacity: number\n  mesh?: THREE.InstancedMesh\n\n  constructor(capacity: number) {\n    this.positions1 = new Float32Array(3 * capacity)\n    this.positions2 = new Float32Array(3 * capacity)\n    this.indices = new Float32Array(capacity)\n    this.radii = new Float32Array(capacity)\n    this.colors = []\n    this.count = 0\n    this.capacity = capacity\n    this.mesh = undefined\n  }\n\n  add(\n    x1: number,\n    y1: number,\n    z1: number,\n    x2: number,\n    y2: number,\n    z2: number,\n    radius: number,\n    r: number = 255.0,\n    g: number = 255.0,\n    b: number = 255.0\n  ) {\n    if (this.count === this.capacity) {\n      console.log(\"Warning, can't add particle because arrays are full\")\n      return\n    }\n\n    const index = this.count\n\n    this.positions1[3 * index + 0] = x1\n    this.positions1[3 * index + 1] = y1\n    this.positions1[3 * index + 2] = z1\n    this.positions2[3 * index + 0] = x2\n    this.positions2[3 * index + 1] = y2\n    this.positions2[3 * index + 2] = z2\n\n    this.colors.push(new THREE.Color(r / 255, g / 255, b / 255))\n\n    this.radii[index] = radius * 0.25\n    this.indices[index] = index\n\n    this.count += 1\n  }\n\n  getRadius = (index: number) => {\n    return this.radii[index]\n  }\n\n  getPosition1 = (index: number) => {\n    return new THREE.Vector3(\n      this.positions1[3 * index + 0],\n      this.positions1[3 * index + 1],\n      this.positions1[3 * index + 2]\n    )\n  }\n\n  getGeometry = () => {\n    const positions = []\n    positions.push(-1, 1, -1)\n    positions.push(-1, -1, -1)\n    positions.push(1, 1, -1)\n    positions.push(1, -1, -1)\n    positions.push(1, 1, 1)\n    positions.push(1, -1, 1)\n\n    const positionBufferAttribute = new THREE.BufferAttribute(\n      new Float32Array(positions),\n      3\n    )\n    const indexBufferAttribute = new THREE.BufferAttribute(\n      new Uint16Array([1, 2, 0, 1, 3, 2, 3, 4, 2, 3, 5, 4]),\n      1\n    )\n\n    const geometry = new THREE.InstancedBufferGeometry()\n\n    geometry.instanceCount = this.count\n    geometry.setIndex(indexBufferAttribute)\n    geometry.setAttribute('position', positionBufferAttribute)\n    geometry.setAttribute('normal', positionBufferAttribute)\n\n    geometry.setAttribute(\n      'position1',\n      new THREE.InstancedBufferAttribute(this.positions1, 3, false, 1)\n    )\n\n    geometry.setAttribute(\n      'position2',\n      new THREE.InstancedBufferAttribute(this.positions2, 3, false, 1)\n    )\n\n    geometry.setAttribute(\n      'bondRadius',\n      new THREE.InstancedBufferAttribute(this.radii, 1, false, 1)\n    )\n\n    return geometry\n  }\n\n  getMesh = () => {\n    if (this.mesh != null) {\n      return this.mesh\n    }\n\n    if (this.count === 0) {\n      return null\n    }\n\n    const geometry = this.getGeometry()\n    const material = createMaterial('bonds', vertexShader, fragmentShader)\n    this.mesh = new THREE.InstancedMesh(geometry, material, this.count)\n\n    const matrix = new THREE.Matrix4()\n    for (let i = 0; i < this.count; i++) {\n      this.mesh.setMatrixAt(i, matrix)\n      this.mesh.setColorAt(i, this.colors[i])\n    }\n    this.mesh.frustumCulled = false\n\n    return this.mesh\n  }\n}\n\nexport default Bonds\n","export default /* glsl */ `\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\nuniform mat4 projectionMatrix;\nvarying vec4 v_position1;\nvarying vec4 v_position2;\nvarying vec4 U;\nvarying vec4 V;\nvarying vec4 axis;\nvarying float height;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tmat3 basis = mat3(U.xyz, V.xyz, axis.xyz);\n    vec3 surfacePoint = vec3(U.w, V.w, axis.w);\n    vec3 rayTarget = surfacePoint;\n\tvec3 rayDirection = normalize(rayTarget); // rayOrigin is (0,0,0) in camera space\n\n\tvec3 diff = rayTarget - v_position2.xyz;\n    vec3 E = diff * basis;\n    float L = height;\n    vec3 D = rayDirection * basis;\n\n    float R1 = v_position1.w;\n    float R2 = v_position2.w;\n    float dR = R2 - R1;\n\n    float a = dot(D.xy, D.xy);\n    float b = dot(E.xy, D.xy);\n    float c = dot(E.xy, E.xy)-R1*R1;\n    float L2Inv = 1.0/(L*L);\n\n\t// Calculate a dicriminant of the above quadratic equation (factor 2 removed from all b-terms above)\n    float d = b*b - a*c;\n\n    // d < 0.0 means the ray hits outside an infinitely long eccentric cone\n    if (d < 0.0) {\n\t\tdiscard;\n    }\n\n\tfloat sqrtd = sqrt(d);\n    float dist1 = (-b - sqrtd)/a;\n    float dist2 = (-b + sqrtd)/a;\n\n    // Make sure dist1 is the smaller one\n    if (dist2 < dist1) {\n      float tmp = dist1;\n      dist1 = dist2;\n      dist2 = tmp;\n    }\n\n\t// Check the smallest root, it is closest camera. Only test if the z-component is outside the truncated eccentric cone\n    float dist = dist1;\n    float intersectionPointZ = E.z + dist*D.z;\n    // Intersection point in camera space\n    vec3 p = rayTarget + dist*rayDirection;\n    bool isInner = false;\n\n    if (intersectionPointZ <= 0.0 ||\n      intersectionPointZ >= L\n      ) {\n      // Either intersection point is behind starting point (happens inside the cone),\n      // or the intersection point is outside the end caps. This is not a valid solution.\n      isInner = true;\n      dist = dist2;\n      intersectionPointZ = E.z + dist*D.z;\n      p = rayTarget + dist*rayDirection;\n\n      if (intersectionPointZ <= 0.0 ||\n        intersectionPointZ >= L\n      ) {\n        // Missed the other point too\n\t\tdiscard;\n      }\n    }\n\n\t// Find normal vector\n    vec3 n = normalize(-axis.xyz);\n    vec3 position1 = v_position1.xyz;\n    vec3 position2 = v_position2.xyz;\n    vec3 A = cross(position1 - p, position2 - p);\n\n    vec3 t = normalize(cross(n, A));\n    vec3 o1 = position1 + R1 * t;\n    vec3 o2 = position2 + R2 * t;\n    vec3 B = o2-o1;\n    normal = normalize(cross(A, B));\n\n#ifdef FRAG_DEPTH\n\tfloat projectedIntersection_z = projectionMatrix[0][2]*p.x + projectionMatrix[1][2]*p.y + projectionMatrix[2][2]*p.z + projectionMatrix[3][2];\n\tfloat projectedIntersection_w = projectionMatrix[0][3]*p.x + projectionMatrix[1][3]*p.y + projectionMatrix[2][3]*p.z + projectionMatrix[3][3];\n\tgl_FragDepthEXT = ((gl_DepthRange.diff * (projectedIntersection_z / projectedIntersection_w)) + gl_DepthRange.near + gl_DepthRange.far) * 0.5;\n#endif\n\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n  \n}\n\n`\n","export interface Color {\n  r: number\n  g: number\n  b: number\n}\n\nexport interface AtomType {\n  fullname: string\n  shortname: string\n  radius: number\n  color: Color\n}\n\nconst AtomTypes: { [key: string]: AtomType } = {\n  H: {\n    shortname: 'H',\n    fullname: 'hydrogen',\n    radius: 1.2,\n    color: { r: 204, g: 204, b: 204 }\n  },\n  He: {\n    shortname: 'He',\n    fullname: 'helium',\n    radius: 1.4,\n    color: { r: 217, g: 255, b: 255 }\n  },\n  Li: {\n    shortname: 'Li',\n    fullname: 'lithium',\n    radius: 1.82,\n    color: { r: 204, g: 128, b: 255 }\n  },\n  Be: {\n    shortname: 'Be',\n    fullname: 'beryllium',\n    radius: 1.53,\n    color: { r: 194, g: 255, b: 0 }\n  },\n  B: {\n    shortname: 'B',\n    fullname: 'boron',\n    radius: 1.92,\n    color: { r: 255, g: 181, b: 181 }\n  },\n  C: {\n    shortname: 'C',\n    fullname: 'carbon',\n    radius: 1.7,\n    color: { r: 80, g: 80, b: 80 }\n  },\n  N: {\n    shortname: 'N',\n    fullname: 'nitrogen',\n    radius: 1.55,\n    color: { r: 48, g: 80, b: 248 }\n  },\n  O: {\n    shortname: 'O',\n    fullname: 'oxygen',\n    radius: 1.52,\n    color: { r: 170, g: 0, b: 0 }\n  },\n  F: {\n    shortname: 'F',\n    fullname: 'fluorine',\n    radius: 1.35,\n    color: { r: 144, g: 224, b: 80 }\n  },\n  Ne: {\n    shortname: 'Ne',\n    fullname: 'neon',\n    radius: 1.54,\n    color: { r: 48, g: 80, b: 248 }\n  },\n  Na: {\n    shortname: 'Na',\n    fullname: 'sodium',\n    radius: 2.27,\n    color: { r: 171, g: 92, b: 242 }\n  },\n  Mg: {\n    shortname: 'Mg',\n    fullname: 'magnesium',\n    radius: 1.73,\n    color: { r: 138, g: 255, b: 0 }\n  },\n  Al: {\n    shortname: 'Al',\n    fullname: 'aluminium',\n    radius: 1.84,\n    color: { r: 191, g: 166, b: 166 }\n  },\n  Si: {\n    shortname: 'Si',\n    fullname: 'silicon',\n    radius: 2.27,\n    color: { r: 240, g: 200, b: 160 }\n  },\n  P: {\n    shortname: 'P',\n    fullname: 'phosphorus',\n    radius: 1.8,\n    color: { r: 255, g: 128, b: 0 }\n  },\n  S: {\n    shortname: 'S',\n    fullname: 'sulfur',\n    radius: 1.8,\n    color: { r: 255, g: 255, b: 48 }\n  },\n  Cl: {\n    shortname: 'Cl',\n    fullname: 'chlorine',\n    radius: 1.75,\n    color: { r: 31, g: 240, b: 31 }\n  },\n  Ar: {\n    shortname: 'Ar',\n    fullname: 'argon',\n    radius: 1.88,\n    color: { r: 128, g: 209, b: 227 }\n  },\n  K: {\n    shortname: 'K',\n    fullname: 'potassium',\n    radius: 2.75,\n    color: { r: 143, g: 64, b: 212 }\n  },\n  Ca: {\n    shortname: 'Ca',\n    fullname: 'calcium',\n    radius: 2.31,\n    color: { r: 61, g: 255, b: 0 }\n  },\n  Sc: {\n    shortname: 'Sc',\n    fullname: 'scandium',\n    radius: 2.11,\n    color: { r: 230, g: 230, b: 230 }\n  },\n  Ti: {\n    shortname: 'Ti',\n    fullname: 'titanium',\n    radius: 2.0,\n    color: { r: 191, g: 194, b: 199 }\n  },\n  V: {\n    shortname: 'V',\n    fullname: 'vanadium',\n    radius: 2.0,\n    color: { r: 166, g: 166, b: 171 }\n  },\n  Cr: {\n    shortname: 'Cr',\n    fullname: 'chromium',\n    radius: 2.0,\n    color: { r: 138, g: 153, b: 199 }\n  },\n  Mn: {\n    shortname: 'Mn',\n    fullname: 'manganese',\n    radius: 2.0,\n    color: { r: 156, g: 122, b: 199 }\n  },\n  Fe: {\n    shortname: 'Fe',\n    fullname: 'iron',\n    radius: 2.0,\n    color: { r: 224, g: 102, b: 51 }\n  },\n  Co: {\n    shortname: 'Co',\n    fullname: 'cobalt',\n    radius: 2.0,\n    color: { r: 240, g: 144, b: 160 }\n  },\n  Ni: {\n    shortname: 'Ni',\n    fullname: 'nickel',\n    radius: 1.63,\n    color: { r: 80, g: 208, b: 80 }\n  },\n  Cu: {\n    shortname: 'Cu',\n    fullname: 'copper',\n    radius: 1.4,\n    color: { r: 200, g: 128, b: 51 }\n  },\n  Zn: {\n    shortname: 'Zn',\n    fullname: 'zinc',\n    radius: 1.39,\n    color: { r: 125, g: 128, b: 176 }\n  },\n  Ga: {\n    shortname: 'Ga',\n    fullname: 'gallium',\n    radius: 1.87,\n    color: { r: 194, g: 143, b: 143 }\n  },\n  Ge: {\n    shortname: 'Ge',\n    fullname: 'germanium',\n    radius: 2.11,\n    color: { r: 102, g: 143, b: 143 }\n  },\n  As: {\n    shortname: 'As',\n    fullname: 'arsenic',\n    radius: 1.85,\n    color: { r: 189, g: 128, b: 227 }\n  },\n  Se: {\n    shortname: 'Se',\n    fullname: 'selenium',\n    radius: 1.9,\n    color: { r: 255, g: 161, b: 0 }\n  },\n  Br: {\n    shortname: 'Br',\n    fullname: 'bromine',\n    radius: 1.85,\n    color: { r: 166, g: 41, b: 41 }\n  },\n  Kr: {\n    shortname: 'Kr',\n    fullname: 'krypton',\n    radius: 2.02,\n    color: { r: 92, g: 184, b: 209 }\n  },\n  Rb: {\n    shortname: 'Rb',\n    fullname: 'rubidium',\n    radius: 3.03,\n    color: { r: 112, g: 46, b: 176 }\n  },\n  Sr: {\n    shortname: 'Sr',\n    fullname: 'strontium',\n    radius: 2.49,\n    color: { r: 0, g: 255, b: 0 }\n  },\n  Y: {\n    shortname: 'Y',\n    fullname: 'yttrium',\n    radius: 2.0,\n    color: { r: 148, g: 255, b: 255 }\n  },\n  Zr: {\n    shortname: 'Zr',\n    fullname: 'zirconium',\n    radius: 2.0,\n    color: { r: 148, g: 224, b: 224 }\n  },\n  Nb: {\n    shortname: 'Nb',\n    fullname: 'niobium',\n    radius: 2.0,\n    color: { r: 115, g: 194, b: 201 }\n  },\n  Mo: {\n    shortname: 'Mo',\n    fullname: 'molybdenum',\n    radius: 2.0,\n    color: { r: 84, g: 181, b: 181 }\n  },\n  Tc: {\n    shortname: 'Tc',\n    fullname: 'technetium',\n    radius: 2.0,\n    color: { r: 59, g: 158, b: 158 }\n  },\n  Ru: {\n    shortname: 'Ru',\n    fullname: 'ruthenium',\n    radius: 2.0,\n    color: { r: 36, g: 143, b: 143 }\n  },\n  Rh: {\n    shortname: 'Rh',\n    fullname: 'rhodium',\n    radius: 2.0,\n    color: { r: 10, g: 125, b: 140 }\n  },\n  Pd: {\n    shortname: 'Pd',\n    fullname: 'palladium',\n    radius: 1.63,\n    color: { r: 0, g: 105, b: 133 }\n  },\n  Ag: {\n    shortname: 'Ag',\n    fullname: 'silver',\n    radius: 1.72,\n    color: { r: 192, g: 192, b: 192 }\n  },\n  Cd: {\n    shortname: 'Cd',\n    fullname: 'cadmium',\n    radius: 1.58,\n    color: { r: 255, g: 217, b: 143 }\n  },\n  In: {\n    shortname: 'In',\n    fullname: 'indium',\n    radius: 1.93,\n    color: { r: 166, g: 117, b: 115 }\n  },\n  Sn: {\n    shortname: 'Sn',\n    fullname: 'tin',\n    radius: 2.17,\n    color: { r: 102, g: 128, b: 128 }\n  },\n  Sb: {\n    shortname: 'Sb',\n    fullname: 'antimony',\n    radius: 2.06,\n    color: { r: 158, g: 99, b: 181 }\n  },\n  Te: {\n    shortname: 'Te',\n    fullname: 'tellurium',\n    radius: 2.06,\n    color: { r: 212, g: 122, b: 0 }\n  },\n  I: {\n    shortname: 'I',\n    fullname: 'iodine',\n    radius: 1.98,\n    color: { r: 148, g: 0, b: 148 }\n  },\n  Xe: {\n    shortname: 'Xe',\n    fullname: 'xenon',\n    radius: 2.16,\n    color: { r: 66, g: 158, b: 176 }\n  },\n  Cs: {\n    shortname: 'Cs',\n    fullname: 'caesium',\n    radius: 3.43,\n    color: { r: 87, g: 23, b: 143 }\n  },\n  Ba: {\n    shortname: 'Ba',\n    fullname: 'barium',\n    radius: 2.68,\n    color: { r: 0, g: 201, b: 0 }\n  },\n  La: {\n    shortname: 'La',\n    fullname: 'lanthanum',\n    radius: 2.0,\n    color: { r: 112, g: 212, b: 255 }\n  },\n  Ce: {\n    shortname: 'Ce',\n    fullname: 'cerium',\n    radius: 2.0,\n    color: { r: 255, g: 255, b: 199 }\n  },\n  Pr: {\n    shortname: 'Pr',\n    fullname: 'praseodymium',\n    radius: 2.0,\n    color: { r: 217, g: 255, b: 199 }\n  },\n  Nd: {\n    shortname: 'Nd',\n    fullname: 'neodymium',\n    radius: 2.0,\n    color: { r: 199, g: 255, b: 199 }\n  },\n  Pm: {\n    shortname: 'Pm',\n    fullname: 'promethium',\n    radius: 2.0,\n    color: { r: 163, g: 255, b: 199 }\n  },\n  Sm: {\n    shortname: 'Sm',\n    fullname: 'samarium',\n    radius: 2.0,\n    color: { r: 143, g: 255, b: 199 }\n  },\n  Eu: {\n    shortname: 'Eu',\n    fullname: 'europium',\n    radius: 2.0,\n    color: { r: 97, g: 255, b: 199 }\n  },\n  Gd: {\n    shortname: 'Gd',\n    fullname: 'gadolinium',\n    radius: 2.0,\n    color: { r: 69, g: 255, b: 199 }\n  },\n  Tb: {\n    shortname: 'Tb',\n    fullname: 'terbium',\n    radius: 2.0,\n    color: { r: 48, g: 255, b: 199 }\n  },\n  Dy: {\n    shortname: 'Dy',\n    fullname: 'dysprosium',\n    radius: 2.0,\n    color: { r: 31, g: 255, b: 199 }\n  },\n  Ho: {\n    shortname: 'Ho',\n    fullname: 'holmium',\n    radius: 2.0,\n    color: { r: 0, g: 255, b: 156 }\n  },\n  Er: {\n    shortname: 'Er',\n    fullname: 'erbium',\n    radius: 2.0,\n    color: { r: 0, g: 230, b: 117 }\n  },\n  Tm: {\n    shortname: 'Tm',\n    fullname: 'thulium',\n    radius: 2.0,\n    color: { r: 0, g: 212, b: 82 }\n  },\n  Yb: {\n    shortname: 'Yb',\n    fullname: 'ytterbium',\n    radius: 2.0,\n    color: { r: 0, g: 191, b: 56 }\n  },\n  Lu: {\n    shortname: 'Lu',\n    fullname: 'lutetium',\n    radius: 2.0,\n    color: { r: 0, g: 171, b: 36 }\n  },\n  Hf: {\n    shortname: 'Hf',\n    fullname: 'hafnium',\n    radius: 2.0,\n    color: { r: 77, g: 194, b: 255 }\n  },\n  Ta: {\n    shortname: 'Ta',\n    fullname: 'tantalum',\n    radius: 2.0,\n    color: { r: 77, g: 166, b: 255 }\n  },\n  W: {\n    shortname: 'W',\n    fullname: 'tungsten',\n    radius: 2.0,\n    color: { r: 33, g: 148, b: 214 }\n  }\n}\n\nexport default AtomTypes\n","import SimulationDataFrame from './simulationdataframe'\nimport Bonds from 'core/geometries/bonds/bonds'\n\nexport default class SimulationData {\n  frames: SimulationDataFrame[]\n  generateBondsFunction?: (frame: SimulationDataFrame) => Bonds\n  constructor() {\n    this.frames = []\n  }\n\n  getFrame = (index: number) => {\n    const frame = this.frames[index]\n    if (this.generateBondsFunction && frame.bonds == null) {\n      const bonds = this.generateBondsFunction(frame)\n      if (bonds.count > 0) {\n        frame.bonds = bonds\n      }\n    }\n\n    return frame\n  }\n\n  getNumFrames = () => {\n    return this.frames.length\n  }\n}\n","import * as THREE from 'three'\n\nexport default class SimulationCell {\n  vector1: THREE.Vector3\n  vector2: THREE.Vector3\n  vector3: THREE.Vector3\n  origin: THREE.Vector3\n  constructor(\n    vector1: THREE.Vector3,\n    vector2: THREE.Vector3,\n    vector3: THREE.Vector3,\n    origin: THREE.Vector3\n  ) {\n    this.vector1 = vector1\n    this.vector2 = vector2\n    this.vector3 = vector3\n    this.origin = origin\n  }\n\n  getCenter = () => {\n    const center = this.origin\n      .clone()\n      .add(this.vector1.clone().multiplyScalar(0.5))\n      .add(this.vector2.clone().multiplyScalar(0.5))\n      .add(this.vector3.clone().multiplyScalar(0.5))\n    return center\n  }\n\n  getOrigin = () => {\n    return this.origin.clone()\n  }\n\n  getBoundingBox = () => {\n    const box = new THREE.Box3()\n    box.expandByPoint(this.origin.clone().add(this.vector1))\n    box.expandByPoint(this.origin.clone().add(this.vector2))\n    box.expandByPoint(this.origin.clone().add(this.vector3))\n    box.expandByPoint(this.origin)\n    return box\n  }\n}\n","import * as THREE from 'three'\nimport Particles from 'core/geometries/particles/particles'\nimport Bonds from 'core/geometries/bonds/bonds'\nimport SimulationCell from './simulationcell'\n\nexport default class SimulationDataFrame {\n  simulationCell: SimulationCell\n  particleTypes: string[]\n  particles: Particles\n  bonds?: Bonds\n\n  constructor(particles: Particles, simulationCell?: SimulationCell) {\n    this.particles = particles\n\n    const particleTypeMap: { [key: string]: boolean } = {}\n    particles.types.forEach((particleType: string) => {\n      particleTypeMap[particleType] = true\n    })\n\n    // @ts-ignore\n    this.particleTypes = Object.keys(particleTypeMap)\n\n    if (simulationCell) {\n      this.simulationCell = simulationCell\n    } else {\n      this.simulationCell = this.generateSimulationCell()\n    }\n  }\n\n  generateSimulationCell = () => {\n    let box = new THREE.Box3()\n    for (let i = 0; i < this.particles.count; i++) {\n      box = box.expandByPoint(this.particles.getPosition(i))\n    }\n\n    const size = box.getSize(new THREE.Vector3())\n    const origin = box\n      .getCenter(new THREE.Vector3())\n      .sub(size.clone().multiplyScalar(0.5))\n    const simulationCell = new SimulationCell(\n      new THREE.Vector3(size.x, 0, 0),\n      new THREE.Vector3(0, size.y, 0),\n      new THREE.Vector3(0, 0, size.x),\n      origin\n    )\n    return simulationCell\n  }\n}\n","import Particles from 'core/geometries/particles/particles'\nimport AtomTypes from 'core/atomtypes'\nimport SimulationData from 'core/simulationdata/simulationdata'\nimport SimulationDataFrame from 'core/simulationdata/simulationdataframe'\n\nfunction addParticlesToFrame(lines: string[], i: number, particles: Particles) {\n  for (let j = 0; j < particles.capacity; j++) {\n    const lineData = lines[i + j].split(/\\s+/).filter(Boolean)\n    const element = lineData[0]\n\n    const atomType = AtomTypes[element]\n    let color = { r: 255, g: 102, b: 102 }\n    let radius = 1.0\n    if (atomType) {\n      radius = atomType.radius\n      color = atomType.color\n    }\n    const x = parseFloat(lineData[1])\n    const y = parseFloat(lineData[2])\n    const z = parseFloat(lineData[3])\n\n    particles.add({\n      x,\n      y,\n      z,\n      radius,\n      r: color.r,\n      g: color.g,\n      b: color.b,\n      type: atomType.shortname\n    })\n  }\n}\n\nconst parseXyz = (data: string): SimulationData => {\n  let particles: Particles | undefined\n  const frames: SimulationDataFrame[] = []\n\n  const lines = data.split('\\n')\n  const numLines = lines.length\n  let i = 0\n  let skipNextLine = false\n  let readNumParticles = true\n\n  while (i < numLines) {\n    if (lines[i] === '') {\n      i++\n      continue\n    }\n\n    if (skipNextLine) {\n      skipNextLine = false\n    } else if (readNumParticles) {\n      const numParticles = parseInt(lines[i], 10)\n\n      if (isNaN(numParticles)) {\n        console.log('Warning, got NaN as numParticles')\n        break\n      }\n\n      particles = new Particles(numParticles)\n      readNumParticles = false\n      skipNextLine = true\n    } else {\n      if (particles) {\n        addParticlesToFrame(lines, i, particles)\n        const frame = new SimulationDataFrame(particles)\n        frames.push(frame)\n        i += particles.count - 1\n        readNumParticles = true\n      }\n    }\n\n    i++\n  }\n\n  const simulationData = new SimulationData()\n  simulationData.frames = frames\n\n  return simulationData\n}\n\nexport default parseXyz\n","/**\n * @file Binary Heap\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\n * @private\n */\n\n/**\n * Binary heap implementation\n * @class\n * @author http://eloquentjavascript.net/appendix2.htm\n * @param {Function} scoreFunction - the heap scoring function\n */\nclass BinaryHeap<T> {\n  content: T[] = []\n\n  constructor(readonly scoreFunction: (x: T) => number) {\n    this.scoreFunction = scoreFunction\n  }\n\n  push(element: T) {\n    // Add the new element to the end of the array.\n    this.content.push(element)\n\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1)\n  }\n\n  pop() {\n    // Store the first element so we can return it later.\n    const result = this.content[0]\n\n    // Get the element at the end of the array.\n    const end = this.content.pop()\n\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (end && this.content.length > 0) {\n      this.content[0] = end\n      this.sinkDown(0)\n    }\n\n    return result\n  }\n\n  peek() {\n    return this.content[0]\n  }\n\n  remove(element: T) {\n    const len = this.content.length\n\n    // To remove a value, we must search through the array to find it.\n    for (let i = 0; i < len; i++) {\n      if (this.content[i] === element) {\n        // When it is found, the process seen in 'pop' is repeated\n        // to fill up the hole.\n        const end = this.content.pop()\n\n        if (end && i !== len - 1) {\n          this.content[i] = end\n\n          if (this.scoreFunction(end) < this.scoreFunction(element)) {\n            this.bubbleUp(i)\n          } else {\n            this.sinkDown(i)\n          }\n        }\n\n        return\n      }\n    }\n\n    throw new Error('Node not found.')\n  }\n\n  size() {\n    return this.content.length\n  }\n\n  bubbleUp(n: number) {\n    // Fetch the element that has to be moved.\n    const element = this.content[n]\n\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = Math.floor((n + 1) / 2) - 1\n      const parent = this.content[parentN]\n\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element\n        this.content[n] = parent\n\n        // Update 'n' to continue at the new position.\n        n = parentN\n      } else {\n        // Found a parent that is less, no need to move it further.\n        break\n      }\n    }\n  }\n\n  sinkDown(n: number) {\n    // Look up the target element and its score.\n    const length = this.content.length\n    const element = this.content[n]\n    const elemScore = this.scoreFunction(element)\n\n    let child1Score = 0\n    let child2Score = 0\n\n    while (true) {\n      // Compute the indices of the child elements.\n      const child2N = (n + 1) * 2\n      const child1N = child2N - 1\n\n      // This is used to store the new position of the element, if any.\n      let swap = null\n\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        const child1 = this.content[child1N]\n        child1Score = this.scoreFunction(child1)\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) swap = child1N\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        const child2 = this.content[child2N]\n        child2Score = this.scoreFunction(child2)\n\n        if (child2Score < (swap === null ? elemScore : child1Score))\n          swap = child2N\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap]\n        this.content[swap] = element\n        n = swap\n      } else {\n        // Otherwise, we are done.\n        break\n      }\n    }\n  }\n}\n\nexport default BinaryHeap\n","/**\n * @file Kdtree\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\n * @private\n */\n\nimport BinaryHeap from './binary-heap'\n\n/**\n * Kdtree\n * @class\n * @author Alexander Rose <alexander.rose@weirdbyte.de>, 2016\n * @author Roman Bolzern <roman.bolzern@fhnw.ch>, 2013\n * @author I4DS http://www.fhnw.ch/i4ds, 2013\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n * @description\n * k-d Tree for typed arrays of 3d points (e.g. for Float32Array), in-place\n * provides fast nearest neighbour search\n *\n * Based on https://github.com/ubilabs/kd-tree-javascript by Ubilabs\n *\n * Further information (including mathematical properties)\n * http://en.wikipedia.org/wiki/Binary_tree\n * http://en.wikipedia.org/wiki/K-d_tree\n *\n * @example\n * points: [x, y, z, x, y, z, x, y, z, ...]\n * metric: function(a, b){\n *    return Math.pow(a[0]-b[0], 2) + Math.pow(a[1]-b[1], 2) + Math.pow(a[2]-b[2], 2);\n * }\n *\n * @param {Float32Array} points - points\n * @param {Function} metric - metric\n */\n\nconst reusableArray = new Float32Array(3)\n\nclass Kdtree {\n  indices: Uint32Array\n  nodes: Int32Array\n  rootIndex: number\n\n  maxDepth = 0\n  currentNode = 0\n\n  constructor(\n    readonly points: Float32Array,\n    readonly metric: (a: Float32Array, b: Float32Array) => number\n  ) {\n    const n = points.length / 3\n\n    const indices = new Uint32Array(n)\n    for (let i = 0; i < n; ++i) {\n      indices[i] = i\n    }\n    this.indices = indices\n    this.nodes = new Int32Array(n * 4)\n    this.rootIndex = this.buildTree(0, -1, 0, n)\n  }\n\n  buildTree(depth: number, parent: number, arrBegin: number, arrEnd: number) {\n    if (depth > this.maxDepth) this.maxDepth = depth\n\n    const plength = arrEnd - arrBegin\n    if (plength === 0) {\n      return -1\n    }\n\n    const nodeIndex = this.currentNode * 4\n    const nodes = this.nodes\n\n    this.currentNode += 1\n    if (plength === 1) {\n      nodes[nodeIndex] = arrBegin\n      nodes[nodeIndex + 1] = -1\n      nodes[nodeIndex + 2] = -1\n      nodes[nodeIndex + 3] = parent\n      return nodeIndex\n    }\n    // if(plength <= 32){\n    //   return nodeIndex;\n    // }\n\n    const indices = this.indices\n    const points = this.points\n\n    const arrMedian = arrBegin + Math.floor(plength / 2)\n    const currentDim = depth % 3\n\n    // inlined quickselect function\n    let j, tmp, pivotIndex, pivotValue, storeIndex\n    let left = arrBegin\n    let right = arrEnd - 1\n    while (right > left) {\n      pivotIndex = (left + right) >> 1\n      pivotValue = points[indices[pivotIndex] * 3 + currentDim]\n      // swap( pivotIndex, right );\n      tmp = indices[pivotIndex]\n      indices[pivotIndex] = indices[right]\n      indices[right] = tmp\n      storeIndex = left\n      for (j = left; j < right; ++j) {\n        if (points[indices[j] * 3 + currentDim] < pivotValue) {\n          // swap( storeIndex, j );\n          tmp = indices[storeIndex]\n          indices[storeIndex] = indices[j]\n          indices[j] = tmp\n          ++storeIndex\n        }\n      }\n      // swap( right, storeIndex );\n      tmp = indices[right]\n      indices[right] = indices[storeIndex]\n      indices[storeIndex] = tmp\n      pivotIndex = storeIndex\n      if (arrMedian === pivotIndex) {\n        break\n      } else if (arrMedian < pivotIndex) {\n        right = pivotIndex - 1\n      } else {\n        left = pivotIndex + 1\n      }\n    }\n\n    nodes[nodeIndex] = arrMedian\n    nodes[nodeIndex + 1] = this.buildTree(\n      depth + 1,\n      nodeIndex,\n      arrBegin,\n      arrMedian\n    )\n    nodes[nodeIndex + 2] = this.buildTree(\n      depth + 1,\n      nodeIndex,\n      arrMedian + 1,\n      arrEnd\n    )\n    nodes[nodeIndex + 3] = parent\n\n    return nodeIndex\n  }\n\n  getNodeDepth(nodeIndex: number): number {\n    const parentIndex = this.nodes[nodeIndex + 3]\n    return parentIndex === -1 ? 0 : this.getNodeDepth(parentIndex) + 1\n  }\n\n  // TODO\n  // function getNodePos (node) {}\n\n  /**\n   * find nearest points\n   * @param {Array} point - array of size 3\n   * @param {Integer} maxNodes - max amount of nodes to return\n   * @param {Float} maxDistance - maximum distance of point to result nodes\n   * @return {Array} array of point, distance pairs\n   */\n  nearest(point: Float32Array, maxNodes: number, maxDistance: number) {\n    const bestNodes = new BinaryHeap<[number, number]>((e) => -e[1])\n\n    const nodes = this.nodes\n    const points = this.points\n    const indices = this.indices\n\n    const nearestSearch = (nodeIndex: number) => {\n      let bestChild, otherChild\n      const dimension = this.getNodeDepth(nodeIndex) % 3\n      const pointIndex = indices[nodes[nodeIndex]] * 3\n      const ownPoint = points.subarray(pointIndex, pointIndex + 3)\n      const ownDistance = this.metric(point, ownPoint)\n\n      function saveNode(nodeIndex: number, distance: number) {\n        bestNodes.push([nodeIndex, distance])\n        if (bestNodes.size() > maxNodes) {\n          bestNodes.pop()\n        }\n      }\n\n      const leftIndex = nodes[nodeIndex + 1]\n      const rightIndex = nodes[nodeIndex + 2]\n\n      // if it's a leaf\n      if (rightIndex === -1 && leftIndex === -1) {\n        if (\n          (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) &&\n          ownDistance <= maxDistance\n        ) {\n          saveNode(nodeIndex, ownDistance)\n        }\n        return\n      }\n\n      if (rightIndex === -1) {\n        bestChild = leftIndex\n      } else if (leftIndex === -1) {\n        bestChild = rightIndex\n      } else {\n        if (point[dimension] <= points[pointIndex + dimension]) {\n          bestChild = leftIndex\n        } else {\n          bestChild = rightIndex\n        }\n      }\n\n      // recursive search\n      nearestSearch(bestChild)\n\n      if (\n        (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) &&\n        ownDistance <= maxDistance\n      ) {\n        saveNode(nodeIndex, ownDistance)\n      }\n\n      // if there's still room or the current distance is nearer than the best distance\n      const linearPoint = reusableArray\n      for (let i = 0; i < 3; i += 1) {\n        if (i === dimension) {\n          linearPoint[i] = point[i]\n        } else {\n          linearPoint[i] = points[pointIndex + i]\n        }\n      }\n      const linearDistance = this.metric(linearPoint, ownPoint)\n\n      if (\n        (bestNodes.size() < maxNodes ||\n          Math.abs(linearDistance) < bestNodes.peek()[1]) &&\n        Math.abs(linearDistance) <= maxDistance\n      ) {\n        if (bestChild === leftIndex) {\n          otherChild = rightIndex\n        } else {\n          otherChild = leftIndex\n        }\n        if (otherChild !== -1) {\n          nearestSearch(otherChild)\n        }\n      }\n    }\n\n    nearestSearch(this.rootIndex)\n\n    const result = []\n    for (let i = 0, il = Math.min(bestNodes.size(), maxNodes); i < il; i += 1) {\n      result.push(bestNodes.content[i])\n    }\n\n    return result\n  }\n\n  verify(nodeIndex?: number, depth = 0) {\n    let count = 1\n\n    if (nodeIndex === undefined) {\n      nodeIndex = this.rootIndex\n    }\n\n    if (nodeIndex === -1) {\n      throw new Error('node is null')\n    }\n\n    const dim = depth % 3\n    const nodes = this.nodes\n    const points = this.points\n    const indices = this.indices\n\n    const leftIndex = nodes[nodeIndex + 1]\n    const rightIndex = nodes[nodeIndex + 2]\n\n    if (leftIndex !== -1) {\n      if (\n        points[indices[nodes[leftIndex]] * 3 + dim] >\n        points[indices[nodes[nodeIndex]] * 3 + dim]\n      ) {\n        throw new Error('left child is > parent!')\n      }\n      count += this.verify(leftIndex, depth + 1)\n    }\n\n    if (rightIndex !== -1) {\n      if (\n        points[indices[nodes[rightIndex]] * 3 + dim] <\n        points[indices[nodes[nodeIndex]] * 3 + dim]\n      ) {\n        throw new Error('right child is < parent!')\n      }\n      count += this.verify(rightIndex, depth + 1)\n    }\n\n    return count\n  }\n}\n\nexport default Kdtree\n","import SimulationDataFrame from 'core/simulationdata/simulationdataframe'\nimport Kdtree from './kdtree/kdtree'\nimport Bonds from 'core/geometries/bonds/bonds'\n\ntype CreateBondsByDistanceOptions = {\n  radius: number\n  pairDistances: { type1: string; type2: string; distance: number }[]\n}\n\nconst createBondsByDistance = ({\n  radius = 0.5,\n  pairDistances = []\n}: CreateBondsByDistanceOptions) => {\n  return (frame: SimulationDataFrame) => {\n    const particles = frame.particles\n    const distance = (a: Float32Array, b: Float32Array) => {\n      return (\n        Math.pow(a[0] - b[0], 2) +\n        Math.pow(a[1] - b[1], 2) +\n        Math.pow(a[2] - b[2], 2)\n      )\n    }\n\n    // Create map so we can do lookups like pairDistancesMap[\"H\"][\"O\"] to find 1.4\n    const pairDistancesMap: { [key: string]: { [key: string]: number } } = {}\n    pairDistances.forEach((pairDistance) => {\n      if (pairDistancesMap[pairDistance.type1] == null) {\n        pairDistancesMap[pairDistance.type1] = {}\n      }\n      if (pairDistancesMap[pairDistance.type2] == null) {\n        pairDistancesMap[pairDistance.type2] = {}\n      }\n\n      pairDistancesMap[pairDistance.type1][pairDistance.type2] =\n        pairDistance.distance\n      pairDistancesMap[pairDistance.type2][pairDistance.type1] =\n        pairDistance.distance\n    })\n    const pairs: { [key: string]: boolean } = {}\n\n    var tree = new Kdtree(\n      particles.positions.subarray(0, 3 * particles.count),\n      distance\n    )\n\n    const position1: THREE.Vector3[] = []\n    const position2: THREE.Vector3[] = []\n\n    for (let i = 0; i < particles.count; i++) {\n      const particle1Type = particles.getType(i)\n      if (pairDistancesMap[particle1Type] == null) {\n        // We have no bonds for this particle type\n        continue\n      }\n      const nearest = tree.nearest(\n        particles.positions.subarray(3 * i, 3 * (i + 1)),\n        4,\n        1.4\n      )\n      for (let j = 0; j < nearest.length; j++) {\n        const nodeIndex = nearest[j][0]\n        const index = tree.indices[tree.nodes[nodeIndex]]\n        if (index === i) {\n          // Skip ourselves, as we always will find that with distance zero\n          continue\n        }\n\n        const particle2Type = particles.getType(index)\n\n        if (pairDistancesMap[particle1Type][particle2Type] == null) {\n          // We have no bonds for this pair of particle types\n          continue\n        }\n\n        const distanceThreshold = pairDistancesMap[particle1Type][particle2Type]\n        const distance = nearest[j][1]\n        if (distance > distanceThreshold) {\n          // Particle pair is too far away\n          continue\n        }\n        const pairKey = index < i ? `${index}-${i}` : `${i}-${index}`\n\n        if (pairs[pairKey] == null) {\n          position1.push(particles.getPosition(i))\n          position2.push(particles.getPosition(index))\n          pairs[pairKey] = true\n        }\n      }\n    }\n\n    const bonds = new Bonds(position1.length)\n    for (let i = 0; i < position1.length; i++) {\n      bonds.add(\n        position1[i].x,\n        position1[i].y,\n        position1[i].z,\n        position2[i].x,\n        position2[i].y,\n        position2[i].z,\n        radius\n      )\n    }\n\n    return bonds\n  }\n}\n\nexport { createBondsByDistance }\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { Drawer, Slider, Row, Col } from 'antd'\nimport { CaretRightOutlined, PauseOutlined } from '@ant-design/icons'\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n.ant-slider-handle {\n  width: 25px;\n  height: 25px;\n  transform: translateY(-25%); !important\n}\n`\n\nconst PlayControls = ({ numFrames, onFrameChanged, playing }: { numFrames: number, playing: boolean, onFrameChanged: (frame: number) => void }) => {\n  const [isPlaying, setIsPlaying] = useState(playing)\n  const [frame, setFrame] = useState(0)\n  const [mouseDown, setMouseDown] = useState(false)\n\n  const onFrameChangedCB = useCallback((frame: number) => {\n    setFrame(frame)\n    onFrameChanged(frame)\n  }, [onFrameChanged])\n\n  const toggleIsPlaying = useCallback(() => {\n    setIsPlaying(!isPlaying)\n  }, [isPlaying])\n\n  const handleMouseDown = useCallback(() => {\n    setMouseDown(true)\n    const onMouseUp = (ev: MouseEvent) => {\n      setMouseDown(false)\n      window.removeEventListener('mouseup', onMouseUp)\n    }\n    window.addEventListener('mouseup', onMouseUp)\n  }, [])\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.keyCode === 32) {\n        // Handle space\n        setIsPlaying(!isPlaying)\n      }\n\n    }\n    window.addEventListener('keydown', handleKeyDown)\n\n    return () => { window.removeEventListener('keydown', handleKeyDown) }\n  }, [isPlaying])\n\n  useEffect(() => {\n    if (!mouseDown && isPlaying) {\n      const interval = setInterval(() => {\n        let nextFrame = frame + 1\n        if (nextFrame >= numFrames) {\n          nextFrame = 0\n        }\n        setFrame(nextFrame)\n        onFrameChanged(nextFrame)\n      }, 20);\n\n      return () => clearInterval(interval);\n    }\n    return () => { }\n  }, [frame, isPlaying, numFrames, onFrameChanged, mouseDown]);\n\n  return (\n    <Drawer\n      height={\"5em\"}\n      placement={\"bottom\"}\n      closable={false}\n      visible={true}\n      mask={false}\n    >\n      <Row>\n        <Col flex=\"10em\">\n          {frame} / {numFrames}\n        </Col>\n        <Col flex=\"auto\">\n          <Container onMouseDown={handleMouseDown} onClick={(e) => { console.log(\"Clicked\") }}>\n            <Slider defaultValue={frame} max={numFrames - 1} value={frame} onChange={onFrameChangedCB} />\n          </Container>\n        </Col>\n        <Col flex=\"3em\">\n          {isPlaying ? <PauseOutlined onClick={toggleIsPlaying} style={{ fontSize: '2em' }} /> : <CaretRightOutlined onClick={toggleIsPlaying} style={{ fontSize: '2em' }} />}\n        </Col>\n      </Row>\n    </Drawer>\n  )\n}\n\nexport default PlayControls","import React, { useEffect, useState } from 'react'\nimport * as THREE from 'three'\n\nimport { OMOVIVisualizer, SimulationData } from 'omovi'\nimport PlayControls from './PlayControls'\n\n// const createBondsFunction = createBondsByDistance({radius: 0.5, pairDistances: [{type1: 'H', type2: 'O', distance: 1.4}]})\ninterface SimulationDataVisualizerProps {\n  simulationData?: SimulationData\n}\nconst SimulationDataVisualizer = ({ simulationData }: SimulationDataVisualizerProps) => {\n  const [frame, setFrame] = useState<number>(0)\n  const [cameraTarget, setCameraTarget] = useState<THREE.Vector3>()\n  const [cameraPosition, setCameraPosition] = useState<THREE.Vector3>()\n\n  useEffect(() => {\n    if (simulationData != null) {\n      // simData.generateBondsFunction = createBondsFunction\n      setFrame(0)\n      const simulationCell = simulationData.frames[0].simulationCell\n      const center = simulationCell.getCenter()\n      const boundingBox = simulationCell.getBoundingBox()\n\n      setCameraTarget(center)\n\n      const position = center.clone().add(boundingBox.max.clone().sub(center).multiplyScalar(3.5))\n      setCameraPosition(position)\n      setCameraTarget(simulationData.frames[0].simulationCell.getCenter())\n    }\n  }, [simulationData])\n\n  if (simulationData == null) {\n    return <>Downloading simulation data ...</>\n  }\n\n  const currentFrame = simulationData.getFrame(frame)\n  if (currentFrame == null) {\n    return <>No simulation data ...</>\n  }\n\n  const onFrameChanged = (newFrame: number) => {\n    setFrame(newFrame)\n  }\n\n  return (\n    <>\n      <OMOVIVisualizer particles={currentFrame.particles} bonds={currentFrame.bonds} cameraTarget={cameraTarget} cameraPosition={cameraPosition} />\n      <PlayControls numFrames={simulationData.getNumFrames()} onFrameChanged={onFrameChanged} playing={true} />\n    </>\n  )\n}\n\nexport default SimulationDataVisualizer\n","import React, { useEffect, useCallback, useState } from 'react'\n\nimport 'antd/dist/antd.css'\nimport { Layout, Menu } from 'antd';\nimport {\n  DotChartOutlined\n} from '@ant-design/icons';\n\nimport FileUpload from './FileUpload'\n\nimport { createBondsByDistance, SimulationData, parseXyz } from 'omovi'\nimport SimulationDataVisualizer from './SimulationDataVisualizer'\n\nimport { useLoadSimulation } from 'hooks/simulation'\nconst { Header, Content, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nconst waterUrl = \"https://raw.githubusercontent.com/andeplane/simulations/main/water.xyz\"\nconst ljUrl = \"https://raw.githubusercontent.com/andeplane/simulations/main/lj.xyz\"\n\nconst App = () => {\n  const [simulationData, setSimulationData] = useState<SimulationData>()\n  const [fileName, setFileName] = useState<string>()\n  const loadSimulation = useLoadSimulation()\n\n  const onFileUploaded = useCallback((fileName: string, contents: string) => {\n    setFileName(fileName)\n    const simulationData = parseXyz(contents)\n    setSimulationData(simulationData)\n  }, [])\n\n  const loadWater = useCallback(() => {\n    const onWaterUploaded = async (fileName: string, contents: string) => {\n      const createBondsFunction = createBondsByDistance({ radius: 0.5, pairDistances: [{ type1: 'H', type2: 'O', distance: 1.4 }] })\n      const simulationData = parseXyz(contents)\n      simulationData.generateBondsFunction = createBondsFunction\n      setFileName(fileName)\n      setSimulationData(simulationData)\n    }\n    loadSimulation(waterUrl, onWaterUploaded)\n  }, [loadSimulation])\n\n  useEffect(() => {\n    if (simulationData == null) {\n      loadWater()\n    }\n  }, [simulationData, onFileUploaded, loadSimulation, loadWater])\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Sider>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" defaultOpenKeys={[\"examples\"]} defaultSelectedKeys={['example1']} mode=\"inline\">\n          <SubMenu key=\"examples\" icon={<DotChartOutlined />} title=\"Examples\">\n            <Menu.Item key=\"example1\" onClick={() => loadWater()} icon={<DotChartOutlined />}>\n              Water molecule\n            </Menu.Item>\n            <Menu.Item key=\"example2\" onClick={() => loadSimulation(ljUrl, onFileUploaded)} icon={<DotChartOutlined />}>\n              LJ liquid\n          </Menu.Item>\n          </SubMenu>\n        </Menu>\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Header className=\"site-layout-background\" style={{ padding: 0, position: 'absolute', left: 200, width: '100%' }}>\n          <h2>{fileName}</h2>\n        </Header>\n        <Content>\n          <SimulationDataVisualizer simulationData={simulationData} />\n          <FileUpload onFileUploaded={onFileUploaded} />\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default App\n","export const useLoadSimulation = () => {\n  return async (url: string, onFileLoaded: (fileName: string, contents: string) => void) => {\n    const file = await fetch(url)\n    const contents = await file.text()\n    onFileLoaded(url, contents)\n  }\n}","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}