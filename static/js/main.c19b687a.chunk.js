(this["webpackJsonpomovi-example"]=this["webpackJsonpomovi-example"]||[]).push([[0],{105:function(e,n,t){"use strict";t.r(n);t(96);var i=t(0),r=t.n(i),a=t(19),o=t.n(a),s=t(25),c=t.n(s),l=t(31),u=t(23),m=(t(101),t(76)),d=t.n(m),f=t(107),p=t(111),h=t(90),v=t(115),g=t(116),b=function(e){var n=e.onFileUploaded,t=Object(i.useRef)(null),a=Object(i.useCallback)((function(){t.current&&(t.current.style.display="block")}),[]),o=Object(i.useCallback)((function(){t.current&&(t.current.style.display="none")}),[]),s=Object(i.useCallback)((function(e){e.dataTransfer.dropEffect="copy",e.preventDefault()}),[]),u=Object(i.useCallback)(function(){var e=Object(l.a)(c.a.mark((function e(t){var i,r,a,s;return c.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),o(),!((r=null===(i=t.dataTransfer)||void 0===i?void 0:i.files)&&r.length>0)){e.next=9;break}return a=r[0].name,e.next=7,r[0].text();case 7:s=e.sent,n(a,s);case 9:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),[o,n]);return Object(i.useEffect)((function(){t.current&&(window.addEventListener("dragenter",(function(e){a()})),t.current.addEventListener("dragenter",s),t.current.addEventListener("dragover",s),t.current.addEventListener("dragleave",(function(e){o()})),t.current.addEventListener("drop",u))}),[s,t,u,o,a]),r.a.createElement("div",{ref:t,className:"dropzone",id:"dropzone"})},_=t(11),y=t(77),x=t.n(y),w=t(69),E=t.n(w);function M(){return(M=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}function C(e,n){return(C=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var j,P=function(e){var n,t;function i(n,t){var i;return(i=e.call(this,t)||this).materialType=n,i.uniforms={},i.extensions={},i.defines={},i}t=e,(n=i).prototype=Object.create(t.prototype),n.prototype.constructor=n,C(n,t);var r=i.prototype;return r.copy=function(e){_.MeshPhongMaterial.prototype.copy.call(this,e);var n=e;return this.type=n.type,this.defines=M({},n.defines),this.extensions=n.extensions,this.uniforms=n.uniforms,this.onBeforeCompile=n.onBeforeCompile,this},r.clone=function(){var e=new _.MeshPhongMaterial;return i.prototype.copy.call(e,this),e},i}(_.MeshPhongMaterial),S={};var z,D=function(e,n,t){if(null!=S[e])return S[e];var i=new P(e,{color:16777215});return i.uniforms.inverseModelMatrix={value:new _.Matrix4},i.uniforms.inverseNormalMatrix={value:new _.Matrix3},function(){if(void 0!==j)return j;var e=new _.WebGLRenderer,n=e.domElement.getContext("webgl");return j=!!(e.capabilities.isWebGL2||null!=n&&null!=n.getExtension("EXT_frag_depth")),e.dispose(),j}()&&(i.extensions.fragDepth=!0,i.defines.FRAG_DEPTH=1),i.onBeforeCompile=function(e){Object.assign(e.uniforms,i.uniforms),i.uniforms=e.uniforms,e.vertexShader=n,e.fragmentShader=t},i.onBeforeCompile.toString=function(){return e},S[e]=i,i},O=new _.Matrix4,k=new _.Matrix4,A=new _.Matrix3,T=new _.Matrix3,R=function(e){var n=this;this.add=function(e){if(null!=e){if(e.material instanceof P){var t=e.material,i=t.type;null==n.materials[i]&&(n.materials[i]=t)}n.object.add(e)}},this.remove=function(e){n.object.remove(e)},this.setupLights=function(e,n,t){e.intensity=.3,n.intensity=.7,t.add(n),t.add(e)},this.setupCanvas=function(e){e.style.width="640px",e.style.height="480px",e.style.minWidth="100%",e.style.minHeight="100%",e.style.maxWidth="100%",e.style.maxHeight="100%"},this.setupCamera=function(e){e.position.set(10,10,10),e.lookAt(new _.Vector3(0,0,0))},this.updateUniforms=function(e){n.object.matrixWorld.copy(n.object.matrixWorld).invert(),k.copy(e.matrixWorldInverse).multiply(n.object.matrixWorld),A.getNormalMatrix(k),T.copy(A).invert(),Object.values(n.materials).forEach((function(e){null!=e.uniforms.inverseModelMatrix&&e.uniforms.inverseModelMatrix.value.copy(O),null!=e.uniforms.inverseNormalMatrix&&e.uniforms.inverseNormalMatrix.value.copy(T)}))},this.dispose=function(){n.domElement.removeChild(n.canvas),n.renderer.dispose()},this.getCameraPosition=function(){return n.controls.getState().position},this.getCameraTarget=function(){return n.controls.getState().target},this.setCameraPosition=function(e){n.controls.setState(e,n.getCameraTarget())},this.setCameraTarget=function(e){n.controls.setState(n.getCameraPosition(),e)},this.animate=function(){n.memoryStats.update(),n.cpuStats.begin(),n.resizeIfNeeded(),n.controls.update(n.clock.getDelta()),n.updateUniforms(n.camera),n.renderer.render(n.scene,n.camera),n.cpuStats.end(),n.latestRequestId=requestAnimationFrame(n.animate.bind(n))},this.resizeIfNeeded=function(){var e=n.renderer.getSize(new _.Vector2),t=e.width,i=e.height,r=0!==n.domElement.clientWidth?n.domElement.clientWidth:n.canvas.clientWidth,a=0!==n.domElement.clientHeight?n.domElement.clientHeight:n.canvas.clientHeight,o=window.devicePixelRatio*r,s=window.devicePixelRatio*a,c=o*s,l=c>14e5?Math.sqrt(14e5/c):1,u=o*l,m=s*l;return!(Math.abs(t-u)<.1&&Math.abs(i-m)<.1)&&(n.renderer.setSize(u,m),function(e,n,t){e instanceof _.PerspectiveCamera&&(e.aspect=n/t),e.updateProjectionMatrix()}(n.camera,u,m),!0)},this.renderer=new _.WebGLRenderer,this.canvas=this.renderer.domElement,this.domElement=e,this.domElement.appendChild(this.canvas),this.setupCanvas(this.canvas),this.scene=new _.Scene,this.ambientLight=new _.AmbientLight(16777215),this.directionalLight=new _.DirectionalLight(16777215),this.setupLights(this.ambientLight,this.directionalLight,this.scene),this.camera=new _.PerspectiveCamera(60,640/480,.1,1e4),this.setupCamera(this.camera),this.controls=new x.a(this.camera,this.canvas),this.latestRequestId=void 0,this.clock=new _.Clock,this.object=new _.Object3D,this.scene.add(this.object),this.cpuStats=new E.a,this.memoryStats=new E.a,this.cpuStats.showPanel(0),this.memoryStats.showPanel(2),document.body.appendChild(this.cpuStats.dom),this.cpuStats.domElement.style.cssText="position:absolute;top:0px;right:80px;",this.memoryStats.domElement.style.cssText="position:absolute;top:0px;right:0px;",document.body.appendChild(this.memoryStats.dom),this.materials={},this.animate()},F=function(e){var n=e.particles,t=e.bonds,a=e.cameraTarget,o=e.cameraPosition,s=Object(i.useRef)(null),c=Object(i.useState)(void 0),l=c[0],u=c[1];Object(i.useEffect)((function(){s.current&&!z&&(z=new R(s.current),u(z))}),[s,l]);var m=Object(i.useRef)();Object(i.useEffect)((function(){m.current=n}));var d=m.current,f=Object(i.useRef)();Object(i.useEffect)((function(){f.current=t}));var p=f.current;return Object(i.useEffect)((function(){l&&(d&&l.remove(d.getMesh()),n&&l.add(n.getMesh()),p&&l.remove(p.getMesh()),t&&l.add(t.getMesh()))}),[n,t,l]),Object(i.useEffect)((function(){l&&a&&l.setCameraTarget(a)}),[a,l]),Object(i.useEffect)((function(){l&&o&&l.setCameraPosition(o)}),[o,l]),Object(i.useEffect)((function(){return function(){z=void 0}}),[]),r.a.createElement("div",{style:{height:"100%",width:"100%"}},r.a.createElement("div",{style:{height:"100%",width:"100%"},ref:s}))},L=function(){function e(e){var n=this;this.getRadius=function(e){return n.radii[e]},this.getPosition=function(e){return new _.Vector3(n.positions[3*e+0],n.positions[3*e+1],n.positions[3*e+2])},this.getType=function(e){return n.types[e]},this.getGeometry=function(){var e=new _.PlaneBufferGeometry(1,1,1,1),t=new _.InstancedBufferGeometry;return t.instanceCount=n.count,t.setIndex(e.getIndex()),t.setAttribute("position",e.getAttribute("position")),t.setAttribute("normal",e.getAttribute("normal")),t.setAttribute("particlePosition",new _.InstancedBufferAttribute(n.positions,3,!1,1)),t.setAttribute("particleRadius",new _.InstancedBufferAttribute(n.radii,1,!1,1)),t},this.getMesh=function(){if(null!=n.mesh)return n.mesh;var e=n.getGeometry(),t=D("particle","\n#define PHONG\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\nuniform mat4 inverseModelMatrix;\nattribute vec3 particlePosition;\nattribute float particleRadius;\n\nvarying vec3 vSurfacePoint;\nvarying vec3 vCenter;\nvarying float vRadius;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvec3 makePerpendicular(vec3 v) {\n    if(v.x == 0.0 && v.y == 0.0) {\n        if(v.z == 0.0) {\n            return vec3(0.0, 0.0, 0.0);\n        }\n        return vec3(0.0, 1.0, 0.0);\n    }\n    return vec3(-v.y, v.x, 0.0);\n}\n\nvec3 mul3(mat4 M, vec3 v) {\n\tvec4 u = M * vec4(v, 1.0);\n\treturn u.xyz / u.w;\n}\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t\n    vec4 mvPosition = vec4( transformed, 1.0 );\n\n    #ifdef USE_INSTANCING\n\n\tvec3 objectToCameraModelSpace = (inverseModelMatrix*vec4(particlePosition - cameraPosition, 1.0)).xyz;\n    vec3 view = normalize(objectToCameraModelSpace);\n    vec3 right = normalize(makePerpendicular(view));\n    vec3 up = cross(right, view);\n\t\n\t// Factor 2.0 is because geometry is 0.5x\n\tvec3 displacement = 2.0*particleRadius*(position.x * right + position.y * up);\n\t// particlePosition + displacement is the current vertex, also move closer to camera so billboard covers the sphere\n\ttransformed = particlePosition + displacement - particleRadius * view;\n\t\n\tvSurfacePoint = mul3(modelViewMatrix, transformed);\n    vCenter = mul3(modelViewMatrix, particlePosition);\n\tvRadius = particleRadius;\n    #endif\n\n    mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n    gl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n","\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\nuniform mat4 projectionMatrix;\nvarying vec3 vSurfacePoint;\nvarying vec3 vCenter;\nvarying float vRadius;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tvec3 rayTarget = vSurfacePoint;\n\tvec3 rayDirection = normalize(rayTarget); // rayOrigin is (0,0,0) in camera space\n\n\tvec3 diff = rayTarget - vCenter.xyz;\n    vec3 E = diff;\n    vec3 D = rayDirection;\n\n    float a = dot(D, D);\n    float b = dot(E, D);\n    float c = dot(E, E) - vRadius*vRadius;\n\n    // discriminant of sphere equation (factor 2 removed from b above)\n    float d = b*b - a*c;\n    if(d < 0.0)\n        discard;\n\t\n    float sqrtd = sqrt(d);\n    float dist1 = (-b - sqrtd)/a;\n    float dist2 = (-b + sqrtd)/a;\n\n    // Make sure dist1 is the smaller one\n    if (dist2 < dist1) {\n        float tmp = dist1;\n        dist1 = dist2;\n        dist2 = tmp;\n    }\n\n    float dist = dist1;\n    float intersectionPointZ = E.z + dist*D.z;\n\tvec3 p = rayTarget + dist*rayDirection;\n\n\t// Find normal vector in local space\n    normal = normalize(vec3(p - vCenter.xyz));\n    // Transform into camera space\n    if (dot(normal, rayDirection) >  0.) {\n        normal = -normal;\n    }\n\n#ifdef FRAG_DEPTH\n\tfloat projectedIntersection_z = projectionMatrix[0][2]*p.x + projectionMatrix[1][2]*p.y + projectionMatrix[2][2]*p.z + projectionMatrix[3][2];\n\tfloat projectedIntersection_w = projectionMatrix[0][3]*p.x + projectionMatrix[1][3]*p.y + projectionMatrix[2][3]*p.z + projectionMatrix[3][3];\n\tgl_FragDepthEXT = ((gl_DepthRange.diff * (projectedIntersection_z / projectedIntersection_w)) + gl_DepthRange.near + gl_DepthRange.far) * 0.5;\n#endif\n\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n");n.mesh=new _.InstancedMesh(e,t,n.count);for(var i=new _.Matrix4,r=0;r<n.count;r++)n.mesh.setMatrixAt(r,i),n.mesh.setColorAt(r,n.colors[r]);return n.mesh.frustumCulled=!1,n.mesh},this.types=[],this.positions=new Float32Array(3*e),this.indices=new Float32Array(e),this.radii=new Float32Array(e),this.colors=[],this.count=0,this.capacity=e,this.mesh=void 0}return e.prototype.add=function(e){var n=e.x,t=e.y,i=e.z,r=e.radius,a=e.type,o=void 0===a?"H":a,s=e.r,c=void 0===s?255:s,l=e.g,u=void 0===l?0:l,m=e.b,d=void 0===m?0:m;if(this.count!==this.capacity){var f=this.count;this.positions[3*f+0]=n,this.positions[3*f+1]=t,this.positions[3*f+2]=i,this.colors.push(new _.Color(c/255,u/255,d/255)),this.radii[f]=.25*r,this.indices[f]=f,this.types.push(o),this.count+=1}else console.log("Warning, can't add particle because arrays are full")},e}(),N=function(){function e(e){var n=this;this.getRadius=function(e){return n.radii[e]},this.getPosition1=function(e){return new _.Vector3(n.positions1[3*e+0],n.positions1[3*e+1],n.positions1[3*e+2])},this.getGeometry=function(){var e=[];e.push(-1,1,-1),e.push(-1,-1,-1),e.push(1,1,-1),e.push(1,-1,-1),e.push(1,1,1),e.push(1,-1,1);var t=new _.BufferAttribute(new Float32Array(e),3),i=new _.BufferAttribute(new Uint16Array([1,2,0,1,3,2,3,4,2,3,5,4]),1),r=new _.InstancedBufferGeometry;return r.instanceCount=n.count,r.setIndex(i),r.setAttribute("position",t),r.setAttribute("normal",t),r.setAttribute("position1",new _.InstancedBufferAttribute(n.positions1,3,!1,1)),r.setAttribute("position2",new _.InstancedBufferAttribute(n.positions2,3,!1,1)),r.setAttribute("bondRadius",new _.InstancedBufferAttribute(n.radii,1,!1,1)),r},this.getMesh=function(){if(null!=n.mesh)return n.mesh;if(0===n.count)return null;var e=n.getGeometry(),t=D("bonds","\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\nuniform mat4 inverseModelMatrix;\nattribute vec3 position1;\nattribute vec3 position2;\nattribute float bondRadius;\n\nvarying vec4 v_position1;\nvarying vec4 v_position2;\n\n// U, V, axis represent the 3x3 cone basis.\n// They are vec4 to pack extra data into the w-component\n// since Safari on iOS only supports 8 varying vec4 registers.\nvarying vec4 U;\nvarying vec4 V;\nvarying vec4 axis;\nvarying float height;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvec3 mul3(mat4 M, vec3 v) {\n\tvec4 u = M * vec4(v, 1.0);\n\treturn u.xyz / u.w;\n}\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\n\tvec4 mvPosition = vec4( transformed, 1.0 );\n\n    // vec3 center = 0.5 * (position1 + position2);\n\tvec3 center = (inverseModelMatrix*vec4(0.5 * (position1 + position2), 1.0)).xyz;\n\theight = length(position2-position1);\n    vec3 newPosition = position;\n\t\n    vec3 objectToCameraModelSpace = (inverseModelMatrix*vec4(cameraPosition - center, 1.0)).xyz;\n\t\n    vec3 lDir = normalize(position1-position2);\n\tfloat dirSign = 1.0;\n    if (dot(objectToCameraModelSpace, lDir) < 0.0) { // direction vector looks away, flip it\n      dirSign = -1.0;\n      lDir *= -1.;\n    }\n\n    vec3 left = normalize(cross(objectToCameraModelSpace, lDir));\n    vec3 up = normalize(cross(left, lDir));\n\n\t// compute basis for cylinder\n    axis.xyz = lDir * dirSign;\n    U.xyz = cross(objectToCameraModelSpace, axis.xyz);\n    V.xyz = cross(U.xyz, axis.xyz);\n    // Transform to camera space\n    axis.xyz = normalize(normalMatrix * axis.xyz);\n    U.xyz = normalize(normalMatrix * U.xyz);\n    V.xyz = normalize(normalMatrix * V.xyz);\n\n\tv_position1.xyz = mul3(viewMatrix, mul3(modelMatrix, position1));\n    v_position2.xyz = mul3(viewMatrix, mul3(modelMatrix, position2));\n\n    // Pack radii as w components of v_centerA and v_centerB\n    v_position1.w = bondRadius;\n    v_position2.w = bondRadius;\n\n\tvec3 surfacePoint = center + mat3(0.5 * height * lDir, bondRadius * left, bondRadius * up) * newPosition;\n    transformed = surfacePoint;\n\n\tsurfacePoint = mul3(modelViewMatrix, surfacePoint);\n\n\t// We pack surfacePoint as w-components of U, V and axis\n    U.w = surfacePoint.x;\n    V.w = surfacePoint.y;\n    axis.w = surfacePoint.z;\n\n    mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n    gl_Position = projectionMatrix * mvPosition;\n\t\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n","\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\nuniform mat4 projectionMatrix;\nvarying vec4 v_position1;\nvarying vec4 v_position2;\nvarying vec4 U;\nvarying vec4 V;\nvarying vec4 axis;\nvarying float height;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tmat3 basis = mat3(U.xyz, V.xyz, axis.xyz);\n    vec3 surfacePoint = vec3(U.w, V.w, axis.w);\n    vec3 rayTarget = surfacePoint;\n\tvec3 rayDirection = normalize(rayTarget); // rayOrigin is (0,0,0) in camera space\n\n\tvec3 diff = rayTarget - v_position2.xyz;\n    vec3 E = diff * basis;\n    float L = height;\n    vec3 D = rayDirection * basis;\n\n    float R1 = v_position1.w;\n    float R2 = v_position2.w;\n    float dR = R2 - R1;\n\n    float a = dot(D.xy, D.xy);\n    float b = dot(E.xy, D.xy);\n    float c = dot(E.xy, E.xy)-R1*R1;\n    float L2Inv = 1.0/(L*L);\n\n\t// Calculate a dicriminant of the above quadratic equation (factor 2 removed from all b-terms above)\n    float d = b*b - a*c;\n\n    // d < 0.0 means the ray hits outside an infinitely long eccentric cone\n    if (d < 0.0) {\n\t\tdiscard;\n    }\n\n\tfloat sqrtd = sqrt(d);\n    float dist1 = (-b - sqrtd)/a;\n    float dist2 = (-b + sqrtd)/a;\n\n    // Make sure dist1 is the smaller one\n    if (dist2 < dist1) {\n      float tmp = dist1;\n      dist1 = dist2;\n      dist2 = tmp;\n    }\n\n\t// Check the smallest root, it is closest camera. Only test if the z-component is outside the truncated eccentric cone\n    float dist = dist1;\n    float intersectionPointZ = E.z + dist*D.z;\n    // Intersection point in camera space\n    vec3 p = rayTarget + dist*rayDirection;\n    bool isInner = false;\n\n    if (intersectionPointZ <= 0.0 ||\n      intersectionPointZ >= L\n      ) {\n      // Either intersection point is behind starting point (happens inside the cone),\n      // or the intersection point is outside the end caps. This is not a valid solution.\n      isInner = true;\n      dist = dist2;\n      intersectionPointZ = E.z + dist*D.z;\n      p = rayTarget + dist*rayDirection;\n\n      if (intersectionPointZ <= 0.0 ||\n        intersectionPointZ >= L\n      ) {\n        // Missed the other point too\n\t\tdiscard;\n      }\n    }\n\n\t// Find normal vector\n    vec3 n = normalize(-axis.xyz);\n    vec3 position1 = v_position1.xyz;\n    vec3 position2 = v_position2.xyz;\n    vec3 A = cross(position1 - p, position2 - p);\n\n    vec3 t = normalize(cross(n, A));\n    vec3 o1 = position1 + R1 * t;\n    vec3 o2 = position2 + R2 * t;\n    vec3 B = o2-o1;\n    normal = normalize(cross(A, B));\n\n#ifdef FRAG_DEPTH\n\tfloat projectedIntersection_z = projectionMatrix[0][2]*p.x + projectionMatrix[1][2]*p.y + projectionMatrix[2][2]*p.z + projectionMatrix[3][2];\n\tfloat projectedIntersection_w = projectionMatrix[0][3]*p.x + projectionMatrix[1][3]*p.y + projectionMatrix[2][3]*p.z + projectionMatrix[3][3];\n\tgl_FragDepthEXT = ((gl_DepthRange.diff * (projectedIntersection_z / projectedIntersection_w)) + gl_DepthRange.near + gl_DepthRange.far) * 0.5;\n#endif\n\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n  \n}\n\n");n.mesh=new _.InstancedMesh(e,t,n.count);for(var i=new _.Matrix4,r=0;r<n.count;r++)n.mesh.setMatrixAt(r,i),n.mesh.setColorAt(r,n.colors[r]);return n.mesh.frustumCulled=!1,n.mesh},this.positions1=new Float32Array(3*e),this.positions2=new Float32Array(3*e),this.indices=new Float32Array(e),this.radii=new Float32Array(e),this.colors=[],this.count=0,this.capacity=e,this.mesh=void 0}return e.prototype.add=function(e,n,t,i,r,a,o,s,c,l){if(void 0===s&&(s=255),void 0===c&&(c=255),void 0===l&&(l=255),this.count!==this.capacity){var u=this.count;this.positions1[3*u+0]=e,this.positions1[3*u+1]=n,this.positions1[3*u+2]=t,this.positions2[3*u+0]=i,this.positions2[3*u+1]=r,this.positions2[3*u+2]=a,this.colors.push(new _.Color(s/255,c/255,l/255)),this.radii[u]=.25*o,this.indices[u]=u,this.count+=1}else console.log("Warning, can't add particle because arrays are full")},e}(),I={H:{shortname:"H",fullname:"hydrogen",radius:1.2,color:{r:204,g:204,b:204}},He:{shortname:"He",fullname:"helium",radius:1.4,color:{r:217,g:255,b:255}},Li:{shortname:"Li",fullname:"lithium",radius:1.82,color:{r:204,g:128,b:255}},Be:{shortname:"Be",fullname:"beryllium",radius:1.53,color:{r:194,g:255,b:0}},B:{shortname:"B",fullname:"boron",radius:1.92,color:{r:255,g:181,b:181}},C:{shortname:"C",fullname:"carbon",radius:1.7,color:{r:80,g:80,b:80}},N:{shortname:"N",fullname:"nitrogen",radius:1.55,color:{r:48,g:80,b:248}},O:{shortname:"O",fullname:"oxygen",radius:1.52,color:{r:170,g:0,b:0}},F:{shortname:"F",fullname:"fluorine",radius:1.35,color:{r:144,g:224,b:80}},Ne:{shortname:"Ne",fullname:"neon",radius:1.54,color:{r:48,g:80,b:248}},Na:{shortname:"Na",fullname:"sodium",radius:2.27,color:{r:171,g:92,b:242}},Mg:{shortname:"Mg",fullname:"magnesium",radius:1.73,color:{r:138,g:255,b:0}},Al:{shortname:"Al",fullname:"aluminium",radius:1.84,color:{r:191,g:166,b:166}},Si:{shortname:"Si",fullname:"silicon",radius:2.27,color:{r:240,g:200,b:160}},P:{shortname:"P",fullname:"phosphorus",radius:1.8,color:{r:255,g:128,b:0}},S:{shortname:"S",fullname:"sulfur",radius:1.8,color:{r:255,g:255,b:48}},Cl:{shortname:"Cl",fullname:"chlorine",radius:1.75,color:{r:31,g:240,b:31}},Ar:{shortname:"Ar",fullname:"argon",radius:1.88,color:{r:128,g:209,b:227}},K:{shortname:"K",fullname:"potassium",radius:2.75,color:{r:143,g:64,b:212}},Ca:{shortname:"Ca",fullname:"calcium",radius:2.31,color:{r:61,g:255,b:0}},Sc:{shortname:"Sc",fullname:"scandium",radius:2.11,color:{r:230,g:230,b:230}},Ti:{shortname:"Ti",fullname:"titanium",radius:2,color:{r:191,g:194,b:199}},V:{shortname:"V",fullname:"vanadium",radius:2,color:{r:166,g:166,b:171}},Cr:{shortname:"Cr",fullname:"chromium",radius:2,color:{r:138,g:153,b:199}},Mn:{shortname:"Mn",fullname:"manganese",radius:2,color:{r:156,g:122,b:199}},Fe:{shortname:"Fe",fullname:"iron",radius:2,color:{r:224,g:102,b:51}},Co:{shortname:"Co",fullname:"cobalt",radius:2,color:{r:240,g:144,b:160}},Ni:{shortname:"Ni",fullname:"nickel",radius:1.63,color:{r:80,g:208,b:80}},Cu:{shortname:"Cu",fullname:"copper",radius:1.4,color:{r:200,g:128,b:51}},Zn:{shortname:"Zn",fullname:"zinc",radius:1.39,color:{r:125,g:128,b:176}},Ga:{shortname:"Ga",fullname:"gallium",radius:1.87,color:{r:194,g:143,b:143}},Ge:{shortname:"Ge",fullname:"germanium",radius:2.11,color:{r:102,g:143,b:143}},As:{shortname:"As",fullname:"arsenic",radius:1.85,color:{r:189,g:128,b:227}},Se:{shortname:"Se",fullname:"selenium",radius:1.9,color:{r:255,g:161,b:0}},Br:{shortname:"Br",fullname:"bromine",radius:1.85,color:{r:166,g:41,b:41}},Kr:{shortname:"Kr",fullname:"krypton",radius:2.02,color:{r:92,g:184,b:209}},Rb:{shortname:"Rb",fullname:"rubidium",radius:3.03,color:{r:112,g:46,b:176}},Sr:{shortname:"Sr",fullname:"strontium",radius:2.49,color:{r:0,g:255,b:0}},Y:{shortname:"Y",fullname:"yttrium",radius:2,color:{r:148,g:255,b:255}},Zr:{shortname:"Zr",fullname:"zirconium",radius:2,color:{r:148,g:224,b:224}},Nb:{shortname:"Nb",fullname:"niobium",radius:2,color:{r:115,g:194,b:201}},Mo:{shortname:"Mo",fullname:"molybdenum",radius:2,color:{r:84,g:181,b:181}},Tc:{shortname:"Tc",fullname:"technetium",radius:2,color:{r:59,g:158,b:158}},Ru:{shortname:"Ru",fullname:"ruthenium",radius:2,color:{r:36,g:143,b:143}},Rh:{shortname:"Rh",fullname:"rhodium",radius:2,color:{r:10,g:125,b:140}},Pd:{shortname:"Pd",fullname:"palladium",radius:1.63,color:{r:0,g:105,b:133}},Ag:{shortname:"Ag",fullname:"silver",radius:1.72,color:{r:192,g:192,b:192}},Cd:{shortname:"Cd",fullname:"cadmium",radius:1.58,color:{r:255,g:217,b:143}},In:{shortname:"In",fullname:"indium",radius:1.93,color:{r:166,g:117,b:115}},Sn:{shortname:"Sn",fullname:"tin",radius:2.17,color:{r:102,g:128,b:128}},Sb:{shortname:"Sb",fullname:"antimony",radius:2.06,color:{r:158,g:99,b:181}},Te:{shortname:"Te",fullname:"tellurium",radius:2.06,color:{r:212,g:122,b:0}},I:{shortname:"I",fullname:"iodine",radius:1.98,color:{r:148,g:0,b:148}},Xe:{shortname:"Xe",fullname:"xenon",radius:2.16,color:{r:66,g:158,b:176}},Cs:{shortname:"Cs",fullname:"caesium",radius:3.43,color:{r:87,g:23,b:143}},Ba:{shortname:"Ba",fullname:"barium",radius:2.68,color:{r:0,g:201,b:0}},La:{shortname:"La",fullname:"lanthanum",radius:2,color:{r:112,g:212,b:255}},Ce:{shortname:"Ce",fullname:"cerium",radius:2,color:{r:255,g:255,b:199}},Pr:{shortname:"Pr",fullname:"praseodymium",radius:2,color:{r:217,g:255,b:199}},Nd:{shortname:"Nd",fullname:"neodymium",radius:2,color:{r:199,g:255,b:199}},Pm:{shortname:"Pm",fullname:"promethium",radius:2,color:{r:163,g:255,b:199}},Sm:{shortname:"Sm",fullname:"samarium",radius:2,color:{r:143,g:255,b:199}},Eu:{shortname:"Eu",fullname:"europium",radius:2,color:{r:97,g:255,b:199}},Gd:{shortname:"Gd",fullname:"gadolinium",radius:2,color:{r:69,g:255,b:199}},Tb:{shortname:"Tb",fullname:"terbium",radius:2,color:{r:48,g:255,b:199}},Dy:{shortname:"Dy",fullname:"dysprosium",radius:2,color:{r:31,g:255,b:199}},Ho:{shortname:"Ho",fullname:"holmium",radius:2,color:{r:0,g:255,b:156}},Er:{shortname:"Er",fullname:"erbium",radius:2,color:{r:0,g:230,b:117}},Tm:{shortname:"Tm",fullname:"thulium",radius:2,color:{r:0,g:212,b:82}},Yb:{shortname:"Yb",fullname:"ytterbium",radius:2,color:{r:0,g:191,b:56}},Lu:{shortname:"Lu",fullname:"lutetium",radius:2,color:{r:0,g:171,b:36}},Hf:{shortname:"Hf",fullname:"hafnium",radius:2,color:{r:77,g:194,b:255}},Ta:{shortname:"Ta",fullname:"tantalum",radius:2,color:{r:77,g:166,b:255}},W:{shortname:"W",fullname:"tungsten",radius:2,color:{r:33,g:148,b:214}}},B=function(){var e=this;this.getFrame=function(n){var t=e.frames[n];if(e.generateBondsFunction&&null==t.bonds){var i=e.generateBondsFunction(t);i.count>0&&(t.bonds=i)}return t},this.getNumFrames=function(){return e.frames.length},this.frames=[]},V=function(e,n,t,i){var r=this;this.getCenter=function(){return r.origin.clone().add(r.vector1.clone().multiplyScalar(.5)).add(r.vector2.clone().multiplyScalar(.5)).add(r.vector3.clone().multiplyScalar(.5))},this.getOrigin=function(){return r.origin.clone()},this.getBoundingBox=function(){var e=new _.Box3;return e.expandByPoint(r.origin.clone().add(r.vector1)),e.expandByPoint(r.origin.clone().add(r.vector2)),e.expandByPoint(r.origin.clone().add(r.vector3)),e.expandByPoint(r.origin),e},this.vector1=e,this.vector2=n,this.vector3=t,this.origin=i},H=function(e,n){var t=this;this.generateSimulationCell=function(){for(var e=new _.Box3,n=0;n<t.particles.count;n++)e=e.expandByPoint(t.particles.getPosition(n));var i=e.getSize(new _.Vector3),r=e.getCenter(new _.Vector3).sub(i.clone().multiplyScalar(.5));return new V(new _.Vector3(i.x,0,0),new _.Vector3(0,i.y,0),new _.Vector3(0,0,i.x),r)},this.particles=e;var i={};e.types.forEach((function(e){i[e]=!0})),this.particleTypes=Object.keys(i),this.simulationCell=n||this.generateSimulationCell()};function G(e,n,t){for(var i=0;i<t.capacity;i++){var r=e[n+i].split(/\s+/).filter(Boolean),a=r[0],o=I[a],s={r:255,g:102,b:102},c=1;o&&(c=o.radius,s=o.color);var l=parseFloat(r[1]),u=parseFloat(r[2]),m=parseFloat(r[3]);t.add({x:l,y:u,z:m,radius:c,r:s.r,g:s.g,b:s.b,type:o.shortname})}}var U,W=function(e){for(var n,t=[],i=e.split("\n"),r=i.length,a=0,o=!1,s=!0;a<r;)if(""!==i[a]){if(o)o=!1;else if(s){var c=parseInt(i[a],10);if(isNaN(c)){console.log("Warning, got NaN as numParticles");break}n=new L(c),s=!1,o=!0}else if(n){G(i,a,n);var l=new H(n);t.push(l),a+=n.count-1,s=!0}a++}else a++;var u=new B;return u.frames=t,u},q=function(){function e(e){this.scoreFunction=e,this.content=[],this.scoreFunction=e}var n=e.prototype;return n.push=function(e){this.content.push(e),this.bubbleUp(this.content.length-1)},n.pop=function(){var e=this.content[0],n=this.content.pop();return n&&this.content.length>0&&(this.content[0]=n,this.sinkDown(0)),e},n.peek=function(){return this.content[0]},n.remove=function(e){for(var n=this.content.length,t=0;t<n;t++)if(this.content[t]===e){var i=this.content.pop();return void(i&&t!==n-1&&(this.content[t]=i,this.scoreFunction(i)<this.scoreFunction(e)?this.bubbleUp(t):this.sinkDown(t)))}throw new Error("Node not found.")},n.size=function(){return this.content.length},n.bubbleUp=function(e){for(var n=this.content[e];e>0;){var t=Math.floor((e+1)/2)-1,i=this.content[t];if(!(this.scoreFunction(n)<this.scoreFunction(i)))break;this.content[t]=n,this.content[e]=i,e=t}},n.sinkDown=function(e){for(var n=this.content.length,t=this.content[e],i=this.scoreFunction(t),r=0;;){var a=2*(e+1),o=a-1,s=null;if(o<n){var c=this.content[o];(r=this.scoreFunction(c))<i&&(s=o)}if(a<n){var l=this.content[a];this.scoreFunction(l)<(null===s?i:r)&&(s=a)}if(null===s)break;this.content[e]=this.content[s],this.content[s]=t,e=s}},e}(),Z=new Float32Array(3),K=function(){function e(e,n){this.points=e,this.metric=n,this.maxDepth=0,this.currentNode=0;for(var t=e.length/3,i=new Uint32Array(t),r=0;r<t;++r)i[r]=r;this.indices=i,this.nodes=new Int32Array(4*t),this.rootIndex=this.buildTree(0,-1,0,t)}var n=e.prototype;return n.buildTree=function(e,n,t,i){e>this.maxDepth&&(this.maxDepth=e);var r=i-t;if(0===r)return-1;var a=4*this.currentNode,o=this.nodes;if(this.currentNode+=1,1===r)return o[a]=t,o[a+1]=-1,o[a+2]=-1,o[a+3]=n,a;for(var s,c,l,u,m,d=this.indices,f=this.points,p=t+Math.floor(r/2),h=e%3,v=t,g=i-1;g>v;){for(u=f[3*d[l=v+g>>1]+h],c=d[l],d[l]=d[g],d[g]=c,m=v,s=v;s<g;++s)f[3*d[s]+h]<u&&(c=d[m],d[m]=d[s],d[s]=c,++m);if(c=d[g],d[g]=d[m],d[m]=c,p===(l=m))break;p<l?g=l-1:v=l+1}return o[a]=p,o[a+1]=this.buildTree(e+1,a,t,p),o[a+2]=this.buildTree(e+1,a,p+1,i),o[a+3]=n,a},n.getNodeDepth=function(e){var n=this.nodes[e+3];return-1===n?0:this.getNodeDepth(n)+1},n.nearest=function(e,n,t){var i=this,r=new q((function(e){return-e[1]})),a=this.nodes,o=this.points,s=this.indices;!function c(l){var u,m,d=i.getNodeDepth(l)%3,f=3*s[a[l]],p=o.subarray(f,f+3),h=i.metric(e,p);function v(e,t){r.push([e,t]),r.size()>n&&r.pop()}var g=a[l+1],b=a[l+2];if(-1!==b||-1!==g){c(u=-1===b?g:-1===g?b:e[d]<=o[f+d]?g:b),(r.size()<n||h<r.peek()[1])&&h<=t&&v(l,h);for(var _=Z,y=0;y<3;y+=1)_[y]=y===d?e[y]:o[f+y];var x=i.metric(_,p);(r.size()<n||Math.abs(x)<r.peek()[1])&&Math.abs(x)<=t&&-1!==(m=u===g?b:g)&&c(m)}else(r.size()<n||h<r.peek()[1])&&h<=t&&v(l,h)}(this.rootIndex);for(var c=[],l=0,u=Math.min(r.size(),n);l<u;l+=1)c.push(r.content[l]);return c},n.verify=function(e,n){void 0===n&&(n=0);var t=1;if(void 0===e&&(e=this.rootIndex),-1===e)throw new Error("node is null");var i=n%3,r=this.nodes,a=this.points,o=this.indices,s=r[e+1],c=r[e+2];if(-1!==s){if(a[3*o[r[s]]+i]>a[3*o[r[e]]+i])throw new Error("left child is > parent!");t+=this.verify(s,n+1)}if(-1!==c){if(a[3*o[r[c]]+i]<a[3*o[r[e]]+i])throw new Error("right child is < parent!");t+=this.verify(c,n+1)}return t},e}(),X=function(e){var n=e.radius,t=void 0===n?.5:n,i=e.pairDistances,r=void 0===i?[]:i;return function(e){var n=e.particles,i={};r.forEach((function(e){null==i[e.type1]&&(i[e.type1]={}),null==i[e.type2]&&(i[e.type2]={}),i[e.type1][e.type2]=e.distance,i[e.type2][e.type1]=e.distance}));for(var a={},o=new K(n.positions.subarray(0,3*n.count),(function(e,n){return Math.pow(e[0]-n[0],2)+Math.pow(e[1]-n[1],2)+Math.pow(e[2]-n[2],2)})),s=[],c=[],l=0;l<n.count;l++){var u=n.getType(l);if(null!=i[u])for(var m=o.nearest(n.positions.subarray(3*l,3*(l+1)),4,1.4),d=0;d<m.length;d++){var f=m[d][0],p=o.indices[o.nodes[f]];if(p!==l){var h=n.getType(p);if(null!=i[u][h]){var v=i[u][h];if(!(m[d][1]>v)){var g=p<l?p+"-"+l:l+"-"+p;null==a[g]&&(s.push(n.getPosition(l)),c.push(n.getPosition(p)),a[g]=!0)}}}}}for(var b=new N(s.length),_=0;_<s.length;_++)b.add(s[_].x,s[_].y,s[_].z,c[_].x,c[_].y,c[_].z,t);return b}},Y=t(78),J=t(109),Q=t(110),$=t(112),ee=t(108),ne=t(113),te=t(114),ie=t(79).a.div(U||(U=Object(Y.a)(["\n.ant-slider-handle {\n  width: 25px;\n  height: 25px;\n  transform: translateY(-25%); !important\n}\n"]))),re=function(e){var n=e.numFrames,t=e.onFrameChanged,a=e.playing,o=Object(i.useState)(a),s=Object(u.a)(o,2),c=s[0],l=s[1],m=Object(i.useState)(0),d=Object(u.a)(m,2),f=d[0],p=d[1],h=Object(i.useState)(!1),v=Object(u.a)(h,2),g=v[0],b=v[1],_=Object(i.useCallback)((function(e){p(e),t(e)}),[t]),y=Object(i.useCallback)((function(){l(!c)}),[c]),x=Object(i.useCallback)((function(){b(!0);window.addEventListener("mouseup",(function e(n){b(!1),window.removeEventListener("mouseup",e)}))}),[]);return Object(i.useEffect)((function(){var e=function(e){32===e.keyCode&&l(!c)};return window.addEventListener("keydown",e),function(){window.removeEventListener("keydown",e)}}),[c]),Object(i.useEffect)((function(){if(!g&&c){var e=setInterval((function(){var e=f+1;e>=n&&(e=0),p(e),t(e)}),20);return function(){return clearInterval(e)}}return function(){}}),[f,c,n,t,g]),r.a.createElement(J.a,{height:"5em",placement:"bottom",closable:!1,visible:!0,mask:!1},r.a.createElement(Q.a,null,r.a.createElement($.a,{flex:"10em"},f," / ",n),r.a.createElement($.a,{flex:"auto"},r.a.createElement(ie,{onMouseDown:x,onClick:function(e){console.log("Clicked")}},r.a.createElement(ee.a,{defaultValue:f,max:n-1,value:f,onChange:_}))),r.a.createElement($.a,{flex:"3em"},c?r.a.createElement(ne.a,{onClick:y,style:{fontSize:"2em"}}):r.a.createElement(te.a,{onClick:y,style:{fontSize:"2em"}}))))},ae=function(e){var n=e.simulationData,t=Object(i.useState)(0),a=Object(u.a)(t,2),o=a[0],s=a[1],c=Object(i.useState)(),l=Object(u.a)(c,2),m=l[0],d=l[1],f=Object(i.useState)(),p=Object(u.a)(f,2),h=p[0],v=p[1];if(Object(i.useEffect)((function(){if(null!=n){s(0);var e=n.frames[0].simulationCell,t=e.getCenter(),i=e.getBoundingBox();d(t);var r=t.clone().add(i.max.clone().sub(t).multiplyScalar(3.5));v(r),d(n.frames[0].simulationCell.getCenter())}}),[n]),null==n)return r.a.createElement(r.a.Fragment,null,"Downloading simulation data ...");var g=n.getFrame(o);if(null==g)return r.a.createElement(r.a.Fragment,null,"No simulation data ...");return r.a.createElement(r.a.Fragment,null,r.a.createElement(F,{particles:g.particles,bonds:g.bonds,cameraTarget:m,cameraPosition:h}),r.a.createElement(re,{numFrames:n.getNumFrames(),onFrameChanged:function(e){s(e)},playing:!0}))},oe=f.a.Header,se=f.a.Content,ce=f.a.Sider,le=p.a.SubMenu,ue="https://raw.githubusercontent.com/andeplane/simulations/main/water.xyz",me="https://raw.githubusercontent.com/andeplane/simulations/main/lj.xyz",de=function(){var e=Object(i.useState)(),n=Object(u.a)(e,2),t=n[0],a=n[1],o=Object(i.useState)(),s=Object(u.a)(o,2),m=s[0],_=s[1],y=Object(i.useState)(),x=Object(u.a)(y,2),w=x[0],E=x[1],M=function(){var e=!1,n=function(){var n=Object(l.a)(c.a.mark((function n(t,i){var r,a;return c.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return e=!0,n.next=3,fetch(t);case 3:return r=n.sent,n.next=6,r.text();case 6:a=n.sent,e=!1,i(t,a);case 9:case"end":return n.stop()}}),n)})));return function(e,t){return n.apply(this,arguments)}}();return{loading:e,loadSimulation:n}}(),C=M.loading,j=M.loadSimulation,P=Object(i.useCallback)((function(e,n){_(e);var t=W(n);a(t)}),[]),S=Object(i.useCallback)((function(){var e=function(){var e=Object(l.a)(c.a.mark((function e(n,t){var i,r;return c.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=X({radius:.5,pairDistances:[{type1:"H",type2:"O",distance:1.4}]}),(r=W(t)).generateBondsFunction=i,_(n),a(r);case 5:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}();E(ue),j(ue,e)}),[j]),z=Object(i.useCallback)((function(){E(me),j(me,P)}),[j,P]),D=new URLSearchParams(window.location.search).get("url");Object(i.useEffect)((function(){null!=D&&D!==w&&(E(D),j(D,P))}),[j,P,D,w]),Object(i.useEffect)((function(){null==t&&null==D&&S()}),[t,P,j,S,D]);var O=void 0===D?["example1"]:void 0;return r.a.createElement(f.a,{style:{minHeight:"100vh"}},r.a.createElement(ce,null,r.a.createElement("div",{className:"logo"}),r.a.createElement(p.a,{theme:"dark",defaultOpenKeys:["examples"],defaultSelectedKeys:O,mode:"inline"},r.a.createElement(le,{key:"examples",icon:r.a.createElement(g.a,null),title:"Examples"},r.a.createElement(p.a.Item,{key:"example1",onClick:function(){return S()},icon:r.a.createElement(g.a,null)},"Water molecule"),r.a.createElement(p.a.Item,{key:"example2",onClick:function(){return z()},icon:r.a.createElement(g.a,null)},"LJ liquid")))),r.a.createElement(f.a,{className:"site-layout"},r.a.createElement(oe,{className:"site-layout-background",style:{padding:0,position:"absolute",left:200,width:"100%"}},C?r.a.createElement("h2",null,"Downloading simulation ..."):w?r.a.createElement("h2",null,m," \xa0 ",r.a.createElement(v.a,{title:"Copy link to this simulation",onClick:function(){return function(){var e=window.location.toString().replace(window.location.search,"")+"?url="+d()(w);navigator.clipboard.writeText(e),h.b.info("Copied simulation link to clipboard")}()}})):r.a.createElement("h2",null,m)),r.a.createElement(se,null,r.a.createElement(ae,{simulationData:t}),r.a.createElement(b,{onFileUploaded:P}))))};o.a.render(r.a.createElement(de,null),document.getElementById("root"))},95:function(e,n,t){e.exports=t(105)},96:function(e,n,t){}},[[95,1,2]]]);
//# sourceMappingURL=main.c19b687a.chunk.js.map