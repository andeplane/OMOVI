{"version":3,"sources":["../../src/OMOVIVisualizer.tsx","../../src/core/materials.ts","../../src/core/visualizer.ts","../../src/core/geometries/particles/particles.ts","../../src/core/geometries/particles/fragment.ts","App.tsx","index.tsx"],"names":["constructor","materialType","parameters","copy","THREE","castedSource","this","defines","clone","material","Material","materialMap","inverseModelMatrix","modelViewMatrix","normalMatrix","inverseNormalMatrix","Visualizer","domElement","add","object","remove","setupLights","ambientLight","directionalLight","scene","setupCanvas","canvas","setupCamera","camera","updateUniforms","Object","animate","requestAnimationFrame","resizeIfNeeded","rendererSize","rendererPixelWidth","rendererPixelHeight","clientWidth","clientHeight","clientPixelWidth","window","clientPixelHeight","clientTextureSize","scale","Math","width","height","adjustCamera","renderer","OMOVIVisualizer","particles","useRef","useState","useEffect","newVisualizer","setVisualizer","prevParticlesRef","prevParticles","visualizer","style","ref","capacity","getRadius","index","getPosition","getGeometry","baseGeometry","geometry","getMesh","color","value","shader","createMaterial","matrix","i","Float32Array","addParticle","numParticles","console","N","particles1","Particles","particles2","x","random","y","z","r","App","useP1","setUseP1","setTimeout","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e76d731.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport Visualizer from './core/visualizer'\nimport Particles from './core/geometries/particles/particles'\n\nlet newVisualizer: Visualizer | undefined\n\nconst OMOVIVisualizer = ({ particles }: { particles: Particles }) => {\n  const domElement = useRef<HTMLDivElement | null>(null)\n  const [visualizer, setVisualizer] = useState<Visualizer | undefined>(\n    undefined\n  )\n\n  useEffect(() => {\n    if (domElement.current && !newVisualizer) {\n      newVisualizer = new Visualizer(domElement.current)\n      setVisualizer(newVisualizer)\n    }\n  }, [domElement, visualizer])\n\n  const prevParticlesRef = useRef<Particles>()\n  useEffect(() => {\n    prevParticlesRef.current = particles\n  })\n  const prevParticles = prevParticlesRef.current\n\n  useEffect(() => {\n    if (!visualizer) {\n      return\n    }\n\n    if (prevParticles) {\n      visualizer.remove(prevParticles.getMesh())\n    }\n    visualizer.add(particles.getMesh())\n  }, [particles, visualizer])\n\n  return (\n    <div style={{ height: '100%', width: '100%' }}>\n      <div style={{ height: '100%', width: '100%' }} ref={domElement} />\n    </div>\n  )\n}\nexport default OMOVIVisualizer\n","import * as THREE from 'three'\n\nexport interface Uniforms {\n  [name: string]: THREE.IUniform\n}\n\nexport interface Extensions {\n  fragDepth?: boolean\n}\n\nclass Material extends THREE.MeshPhongMaterial {\n  materialType: string\n  uniforms: Uniforms\n  extensions: Extensions\n\n  constructor(\n    materialType: string,\n    parameters?: THREE.MeshPhongMaterialParameters\n  ) {\n    super(parameters)\n    // @ts-ignore\n    this.materialType = materialType\n    this.uniforms = {}\n    this.extensions = {}\n  }\n\n  copy(source: THREE.Material): this {\n    THREE.MeshPhongMaterial.prototype.copy.call(this, source)\n    const castedSource = source as Material\n    this.type = castedSource.type\n    this.defines = { ...castedSource.defines }\n    this.uniforms = castedSource.uniforms\n    this.onBeforeCompile = castedSource.onBeforeCompile\n    return this\n  }\n\n  clone(): this {\n    // three.js uses \"this\" for no good reason, and we need to match that\n    const material = new THREE.MeshPhongMaterial()\n    Material.prototype.copy.call(material, this)\n    return material as this\n  }\n}\n\nconst materialMap: { [key: string]: Material } = {}\n\nconst createMaterial = (\n  type: string,\n  vertexShader: string,\n  fragmentShader: string\n) => {\n  if (materialMap[type] != null) {\n    return materialMap[type]\n  }\n\n  const material = new Material(type, { color: 0xff0000 })\n  material.uniforms.inverseModelMatrix = { value: new THREE.Matrix4() }\n  material.uniforms.inverseNormalMatrix = { value: new THREE.Matrix3() }\n\n  material.onBeforeCompile = (shader: THREE.Shader) => {\n    Object.assign(shader.uniforms, material.uniforms)\n    material.uniforms = shader.uniforms\n\n    shader.vertexShader = vertexShader\n    shader.fragmentShader = fragmentShader\n  }\n\n  // Necessary because of a bug in THREE.JS\n  // https://github.com/mrdoob/three.js/issues/15948\n  material.onBeforeCompile.toString = () => type\n\n  materialMap[type] = material\n  return material\n}\n\nexport default createMaterial\nexport { Material }\n","import * as THREE from 'three'\nimport ComboControls from '@cognite/three-combo-controls'\nimport { Material } from './materials'\n\nconst inverseModelMatrix = new THREE.Matrix4()\nconst modelViewMatrix = new THREE.Matrix4()\nconst normalMatrix = new THREE.Matrix3()\nconst inverseNormalMatrix = new THREE.Matrix3()\n\nconst adjustCamera = (\n  camera: THREE.PerspectiveCamera,\n  width: number,\n  height: number\n) => {\n  if (camera instanceof THREE.PerspectiveCamera) {\n    camera.aspect = width / height\n  }\n  camera.updateProjectionMatrix()\n}\n\nexport default class Visualizer {\n  private renderer: THREE.WebGLRenderer\n  private canvas: HTMLCanvasElement\n  public scene: THREE.Scene\n  private camera: THREE.PerspectiveCamera\n  private ambientLight: THREE.AmbientLight\n  private directionalLight: THREE.DirectionalLight\n  private controls: ComboControls\n  private clock: THREE.Clock\n  private domElement: HTMLElement\n  private object: THREE.Object3D\n  private materials: { [key: string]: Material }\n\n  // @ts-ignore\n  private latestRequestId?: number\n\n  constructor(domElement: HTMLElement) {\n    this.renderer = new THREE.WebGLRenderer()\n\n    this.canvas = this.renderer.domElement\n    this.domElement = domElement\n    this.domElement.appendChild(this.canvas)\n    this.setupCanvas(this.canvas)\n\n    this.scene = new THREE.Scene()\n\n    this.ambientLight = new THREE.AmbientLight(0xffffff)\n    this.directionalLight = new THREE.DirectionalLight(0xffffff)\n    this.setupLights(this.ambientLight, this.directionalLight, this.scene)\n\n    this.camera = new THREE.PerspectiveCamera(60, 640 / 480, 0.1, 10000)\n    this.setupCamera(this.camera)\n    this.controls = new ComboControls(this.camera, this.canvas)\n\n    this.latestRequestId = undefined\n    this.clock = new THREE.Clock()\n    this.object = new THREE.Object3D()\n    this.scene.add(this.object)\n\n    this.materials = {}\n    this.animate()\n  }\n\n  add = (object: THREE.Mesh) => {\n    if (object.material instanceof Material) {\n      const material = object.material as Material\n      const materialType = material.type\n      if (this.materials[materialType] == null) {\n        this.materials[materialType] = material\n      }\n    }\n\n    this.object.add(object)\n  }\n\n  remove = (object: THREE.Mesh) => {\n    this.object.remove(object)\n  }\n\n  setupLights = (\n    ambientLight: THREE.AmbientLight,\n    directionalLight: THREE.DirectionalLight,\n    scene: THREE.Scene\n  ) => {\n    ambientLight.intensity = 0.3\n    directionalLight.intensity = 0.7\n    scene.add(directionalLight)\n    scene.add(ambientLight)\n  }\n\n  setupCanvas = (canvas: HTMLCanvasElement) => {\n    canvas.style.width = '640px'\n    canvas.style.height = '480px'\n    canvas.style.minWidth = '100%'\n    canvas.style.minHeight = '100%'\n    canvas.style.maxWidth = '100%'\n    canvas.style.maxHeight = '100%'\n  }\n\n  setupCamera = (camera: THREE.PerspectiveCamera) => {\n    camera.position.set(10, 10, 10)\n    camera.lookAt(new THREE.Vector3(0, 0, 0))\n  }\n\n  updateUniforms = (camera: THREE.PerspectiveCamera) => {\n    this.object.matrixWorld.copy(this.object.matrixWorld).invert()\n    modelViewMatrix\n      .copy(camera.matrixWorldInverse)\n      .multiply(this.object.matrixWorld)\n    normalMatrix.getNormalMatrix(modelViewMatrix)\n    inverseNormalMatrix.copy(normalMatrix).invert()\n\n    Object.values(this.materials).forEach((material) => {\n      if (material.uniforms.inverseModelMatrix != null) {\n        material.uniforms.inverseModelMatrix.value.copy(inverseModelMatrix)\n      }\n      if (material.uniforms.inverseNormalMatrix != null) {\n        material.uniforms.inverseNormalMatrix.value.copy(inverseNormalMatrix)\n      }\n    })\n  }\n\n  animate = () => {\n    this.resizeIfNeeded()\n    this.controls.update(this.clock.getDelta())\n    this.updateUniforms(this.camera)\n    this.renderer.render(this.scene, this.camera)\n    this.latestRequestId = requestAnimationFrame(this.animate.bind(this))\n    // console.log(this.camera.position.clone())\n  }\n\n  resizeIfNeeded = () => {\n    // The maxTextureSize is chosen from testing on low-powered hardware,\n    // and could be increased in the future.\n    // TODO Increase maxTextureSize if SSAO performance is improved\n    const maxTextureSize = 1.4e6\n\n    const rendererSize = this.renderer.getSize(new THREE.Vector2())\n    const rendererPixelWidth = rendererSize.width\n    const rendererPixelHeight = rendererSize.height\n\n    // client width and height are in virtual pixels and not yet scaled by dpr\n    // TODO VERSION 5.0.0 remove the test for dom element size once we have removed the getCanvas function\n    const clientWidth =\n      this.domElement.clientWidth !== 0\n        ? this.domElement.clientWidth\n        : this.canvas.clientWidth\n    const clientHeight =\n      this.domElement.clientHeight !== 0\n        ? this.domElement.clientHeight\n        : this.canvas.clientHeight\n    const clientPixelWidth = window.devicePixelRatio * clientWidth\n    const clientPixelHeight = window.devicePixelRatio * clientHeight\n    const clientTextureSize = clientPixelWidth * clientPixelHeight\n\n    const scale =\n      clientTextureSize > maxTextureSize\n        ? Math.sqrt(maxTextureSize / clientTextureSize)\n        : 1\n\n    const width = clientPixelWidth * scale\n    const height = clientPixelHeight * scale\n\n    const maxError = 0.1 // pixels\n    const isOptimalSize =\n      Math.abs(rendererPixelWidth - width) < maxError &&\n      Math.abs(rendererPixelHeight - height) < maxError\n\n    if (isOptimalSize) {\n      return false\n    }\n\n    this.renderer.setSize(width, height)\n\n    adjustCamera(this.camera, width, height)\n\n    return true\n  }\n}\n","import * as THREE from 'three'\nimport fragmentShader from './fragment'\nimport vertexShader from './vertex'\nimport createMaterial from 'core/materials'\n\nclass Particles {\n  positions: Float32Array\n  indices: Float32Array\n  radii: Float32Array\n  numParticles: number\n  capacity: number\n  mesh?: THREE.InstancedMesh\n\n  constructor(capacity: number) {\n    this.positions = new Float32Array(3 * capacity)\n    this.indices = new Float32Array(capacity)\n    this.radii = new Float32Array(capacity)\n    this.numParticles = 0\n    this.capacity = capacity\n    this.mesh = undefined\n  }\n\n  addParticle(x: number, y: number, z: number, radius: number) {\n    if (this.numParticles === this.capacity) {\n      console.log(\"Warning, can't add particle because arrays are full\")\n      return\n    }\n\n    const index = this.numParticles\n\n    this.positions[3 * index + 0] = x\n    this.positions[3 * index + 1] = y\n    this.positions[3 * index + 2] = z\n    this.radii[index] = radius\n    this.indices[index] = index\n\n    this.numParticles += 1\n  }\n\n  getRadius = (index: number) => {\n    return this.radii[index]\n  }\n\n  getPosition = (index: number) => {\n    return new THREE.Vector3(\n      this.positions[3 * index + 0],\n      this.positions[3 * index + 1],\n      this.positions[3 * index + 2]\n    )\n  }\n\n  getGeometry = () => {\n    const baseGeometry = new THREE.PlaneBufferGeometry(1, 1, 1, 1)\n    const geometry = new THREE.InstancedBufferGeometry()\n\n    geometry.instanceCount = this.numParticles\n    geometry.setIndex(baseGeometry.getIndex())\n    geometry.setAttribute('position', baseGeometry.getAttribute('position'))\n    geometry.setAttribute('normal', baseGeometry.getAttribute('normal'))\n\n    geometry.setAttribute(\n      'particlePosition',\n      new THREE.InstancedBufferAttribute(this.positions, 3, false, 1)\n    )\n    geometry.setAttribute(\n      'particleRadius',\n      new THREE.InstancedBufferAttribute(this.radii, 1, false, 1)\n    )\n    return geometry\n  }\n\n  getMesh = () => {\n    if (this.mesh != null) {\n      return this.mesh\n    }\n    const geometry = this.getGeometry()\n    const material = createMaterial('particle', vertexShader, fragmentShader)\n    this.mesh = new THREE.InstancedMesh(geometry, material, this.numParticles)\n\n    const matrix = new THREE.Matrix4()\n    for (let i = 0; i < this.numParticles; i++) {\n      this.mesh.setMatrixAt(i, matrix)\n      this.mesh.setColorAt(i, new THREE.Color('red'))\n    }\n    this.mesh.frustumCulled = false\n\n    return this.mesh\n  }\n}\n\nexport default Particles\n","export default /* glsl */ `\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\nvarying vec3 vSurfacePoint;\nvarying vec3 vCenter;\nvarying float vRadius;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tvec3 rayTarget = vSurfacePoint;\n\tvec3 rayDirection = normalize(rayTarget); // rayOrigin is (0,0,0) in camera space\n\n\tvec3 diff = rayTarget - vCenter.xyz;\n    vec3 E = diff;\n    vec3 D = rayDirection;\n\n    float a = dot(D, D);\n    float b = dot(E, D);\n    float c = dot(E, E) - vRadius*vRadius;\n\n    // discriminant of sphere equation (factor 2 removed from b above)\n    float d = b*b - a*c;\n    if(d < 0.0)\n        discard;\n\t\n    float sqrtd = sqrt(d);\n    float dist1 = (-b - sqrtd)/a;\n    float dist2 = (-b + sqrtd)/a;\n\n    // Make sure dist1 is the smaller one\n    if (dist2 < dist1) {\n        float tmp = dist1;\n        dist1 = dist2;\n        dist2 = tmp;\n    }\n\n    float dist = dist1;\n    float intersectionPointZ = E.z + dist*D.z;\n\tvec3 p = rayTarget + dist*rayDirection;\n\n\t// Find normal vector in local space\n    normal = normalize(vec3(p - vCenter.xyz));\n    // Transform into camera space\n    if (dot(normal, rayDirection) >  0.) {\n        normal = -normal;\n    }\n\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n`\n","import React, {useState} from 'react'\n\nimport { OMOVIVisualizer, Particles } from 'omovi'\nimport 'omovi/dist/index.css'\n\nconst N = 100000;\nconst particles1 = new Particles(N);\nparticles1.addParticle(-0.5, 0, 0, 0.5)\nparticles1.addParticle(0.5, 0, 0, 0.5)\n\nconst particles2 = new Particles(N);\nparticles2.addParticle(-0.5, 0.5, 0, 0.5)\nparticles2.addParticle(0.5, -0.5, 0, 0.5)\n\nfor (let i = 0; i < N; i++) {\n  let x = 500 * (Math.random() - 0.5);\n  let y = 500 * (Math.random() - 0.5);\n  let z = 500 * (Math.random() - 0.5);\n  let r = 0.5 + Math.random();\n  particles1.addParticle(x,y,z,r)\n\n  x = 500 * (Math.random() - 0.5);\n  y = 500 * (Math.random() - 0.5);\n  z = 500 * (Math.random() - 0.5);\n  r = 0.5 + Math.random();\n  particles2.addParticle(x,y,z,r)\n}\n\nconst App = () => {\n  const [useP1, setUseP1] = useState(true);\n\n  setTimeout(() => {\n    setUseP1(!useP1)\n  }, 1000)\n  \n  let particles = particles1;\n  if (!useP1) {\n    particles = particles2;\n  }\n\n  console.log(\"Using particles1 \", particles === particles1)\n  \n  return <OMOVIVisualizer particles={particles} />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}