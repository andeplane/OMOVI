{"version":3,"sources":["../../src/OMOVIVisualizer.tsx","../../src/core/visualizer.ts","App.tsx","index.tsx"],"names":["Visualizer","constructor","domElement","setupLights","ambientLight","directionalLight","scene","setupCanvas","canvas","setupCamera","camera","animate","requestAnimationFrame","resizeIfNeeded","rendererSize","rendererPixelWidth","rendererPixelHeight","clientWidth","clientHeight","clientPixelWidth","window","clientPixelHeight","clientTextureSize","scale","Math","width","height","adjustCamera","this","renderer","geometry","material","color","sphere","OMOVIVisualizer","useRef","useState","useEffect","newVisualizer","setVisualizer","style","ref","App","ReactDOM","render","document","getElementById"],"mappings":"gLAGA,E,qECWqBA,EAanBC,WAAYC,kCA4BZ,KAAAC,YAAc,gBAKZC,cACAC,cACAC,SACAA,UAGF,KAAAC,YAAeC,YACbA,sBACAA,uBACAA,wBACAA,yBACAA,wBACAA,0BAGF,KAAAC,YAAeC,YACbA,yBACAA,SAAc,IAAI,EAAJ,YAAdA,KAGF,KAAAC,QAAU,WACR,mBACA,kBAAqB,QAArB,YACA,kBAAqB,EAArB,MAAiC,EAAjC,QACA,kBAAuBC,sBAAsB,eAA7C,KAGF,KAAAC,eAAiB,WAIf,IAEMC,EAAe,mBAAsB,IAA3C,WACMC,EAAqBD,EAA3B,MACME,EAAsBF,EAA5B,OAIMG,EACJ,6BACI,aADJ,YAEI,SAHN,YAIMC,EACJ,8BACI,aADJ,aAEI,SAHN,aAIMC,EAAmBC,wBAAzB,EACMC,EAAoBD,wBAA1B,EACME,EAAoBH,EAA1B,EAEMI,EACJD,EArBF,KAsBME,UAtBN,KAqBEF,GADF,EAKMG,EAAQN,EAAd,EACMO,EAASL,EAAf,EAOA,QAHEG,SAAST,EAATS,GAFF,IAGEA,SAASR,EAATQ,GAHF,MASA,wBA7HiB,SAAC,EAAD,KAKfd,aAAJ,sBACEA,SAAgBe,EAAhBf,GAEFA,2BAuHEiB,CAAa,EAAD,SAAZA,IAEA,IAxGAC,KAAA,SAAgB,IAAhB,gBAEAA,KAAA,OAAcA,KAAKC,SAAnB,WACAD,KAAA,aACAA,KAAA,uBAA4BA,KAA5B,QACAA,KAAA,YAAiBA,KAAjB,QAEAA,KAAA,MAAa,IAAb,QAEAA,KAAA,aAAoB,IAAI,EAAJ,aAApB,UACAA,KAAA,iBAAwB,IAAI,EAAJ,iBAAxB,UACAA,KAAA,YAAiBA,KAAjB,aAAoCA,KAApC,iBAA2DA,KAA3D,OAEAA,KAAA,OAAc,IAAI,EAAJ,qBAAgC,IAAhC,OAAd,KACAA,KAAA,YAAiBA,KAAjB,QACAA,KAAA,SAAgB,IAAI,EAAJ,EAAkBA,KAAlB,OAA+BA,KAA/C,QAEA,IAAME,EAAW,IAAI,EAAJ,oBAAjB,IACMC,EAAW,IAAI,EAAJ,kBAA4B,CAAEC,MAAO,WAChDC,EAAS,IAAI,EAAJ,OAAf,GACAL,KAAA,aAEAA,KAAA,uBACAA,KAAA,MAAa,IAAb,QACAA,KAAA,WD/CEM,EAAkB,WACtB,IAAMhC,EAAaiC,iBAAnB,MADsB,EAEcC,wBAApC,GAFsB,mBAEhB,EAFgB,KAEhB,EAFgB,KAatB,OAPAC,qBAAU,WACJnC,YAAJ,IACEoC,EAAgB,IAAI,EAAWpC,EAA/BoC,SACAC,QAED,CAACrC,EALJmC,IAQE,yBAAKG,MAAO,CAAEd,OAAF,OAAkBD,MAAO,SACnC,yBAAKe,MAAO,CAAEd,OAAF,OAAkBD,MAAO,QAAUgB,IAAKvC,MEX3CwC,G,MAJH,WACV,OAAO,kBAAC,EAAD,QCATC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.dad8957a.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport Visualizer from './core/visualizer'\n\nlet newVisualizer: Visualizer | undefined\n\nconst OMOVIVisualizer = () => {\n  const domElement = useRef<HTMLDivElement | null>(null)\n  const [visualizer, setVisualizer] = useState<Visualizer | undefined>(\n    undefined\n  )\n\n  useEffect(() => {\n    if (domElement.current && !newVisualizer) {\n      newVisualizer = new Visualizer(domElement.current)\n      setVisualizer(newVisualizer)\n    }\n  }, [domElement, visualizer])\n\n  return (\n    <div style={{ height: '100%', width: '100%' }}>\n      <div style={{ height: '100%', width: '100%' }} ref={domElement} />\n    </div>\n  )\n}\nexport default OMOVIVisualizer\n","import * as THREE from 'three'\nimport ComboControls from '@cognite/three-combo-controls'\n\nconst adjustCamera = (\n  camera: THREE.PerspectiveCamera,\n  width: number,\n  height: number\n) => {\n  if (camera instanceof THREE.PerspectiveCamera) {\n    camera.aspect = width / height\n  }\n  camera.updateProjectionMatrix()\n}\n\nexport default class Visualizer {\n  private renderer: THREE.WebGLRenderer\n  private canvas: HTMLCanvasElement\n  private scene: THREE.Scene\n  private camera: THREE.PerspectiveCamera\n  private ambientLight: THREE.AmbientLight\n  private directionalLight: THREE.DirectionalLight\n  private controls: ComboControls\n  private clock: THREE.Clock\n  private domElement: HTMLElement\n  // @ts-ignore\n  private latestRequestId?: number\n\n  constructor(domElement: HTMLElement) {\n    this.renderer = new THREE.WebGLRenderer()\n\n    this.canvas = this.renderer.domElement\n    this.domElement = domElement\n    this.domElement.appendChild(this.canvas)\n    this.setupCanvas(this.canvas)\n\n    this.scene = new THREE.Scene()\n\n    this.ambientLight = new THREE.AmbientLight(0xffffff)\n    this.directionalLight = new THREE.DirectionalLight(0xffffff)\n    this.setupLights(this.ambientLight, this.directionalLight, this.scene)\n\n    this.camera = new THREE.PerspectiveCamera(60, 640 / 480, 0.1, 10000)\n    this.setupCamera(this.camera)\n    this.controls = new ComboControls(this.camera, this.canvas)\n\n    const geometry = new THREE.SphereGeometry(5, 32, 32)\n    const material = new THREE.MeshBasicMaterial({ color: 0xff0000 })\n    const sphere = new THREE.Mesh(geometry, material)\n    this.scene.add(sphere)\n\n    this.latestRequestId = undefined\n    this.clock = new THREE.Clock()\n    this.animate()\n  }\n\n  setupLights = (\n    ambientLight: THREE.AmbientLight,\n    directionalLight: THREE.DirectionalLight,\n    scene: THREE.Scene\n  ) => {\n    ambientLight.intensity = 1.0\n    directionalLight.intensity = 1.0\n    scene.add(directionalLight)\n    scene.add(ambientLight)\n  }\n\n  setupCanvas = (canvas: HTMLCanvasElement) => {\n    canvas.style.width = '640px'\n    canvas.style.height = '480px'\n    canvas.style.minWidth = '100%'\n    canvas.style.minHeight = '100%'\n    canvas.style.maxWidth = '100%'\n    canvas.style.maxHeight = '100%'\n  }\n\n  setupCamera = (camera: THREE.PerspectiveCamera) => {\n    camera.position.set(10, 10, 10)\n    camera.lookAt(new THREE.Vector3(0, 0, 0))\n  }\n\n  animate = () => {\n    this.resizeIfNeeded()\n    this.controls.update(this.clock.getDelta())\n    this.renderer.render(this.scene, this.camera)\n    this.latestRequestId = requestAnimationFrame(this.animate.bind(this))\n  }\n\n  resizeIfNeeded = () => {\n    // The maxTextureSize is chosen from testing on low-powered hardware,\n    // and could be increased in the future.\n    // TODO Increase maxTextureSize if SSAO performance is improved\n    const maxTextureSize = 1.4e6\n\n    const rendererSize = this.renderer.getSize(new THREE.Vector2())\n    const rendererPixelWidth = rendererSize.width\n    const rendererPixelHeight = rendererSize.height\n\n    // client width and height are in virtual pixels and not yet scaled by dpr\n    // TODO VERSION 5.0.0 remove the test for dom element size once we have removed the getCanvas function\n    const clientWidth =\n      this.domElement.clientWidth !== 0\n        ? this.domElement.clientWidth\n        : this.canvas.clientWidth\n    const clientHeight =\n      this.domElement.clientHeight !== 0\n        ? this.domElement.clientHeight\n        : this.canvas.clientHeight\n    const clientPixelWidth = window.devicePixelRatio * clientWidth\n    const clientPixelHeight = window.devicePixelRatio * clientHeight\n    const clientTextureSize = clientPixelWidth * clientPixelHeight\n\n    const scale =\n      clientTextureSize > maxTextureSize\n        ? Math.sqrt(maxTextureSize / clientTextureSize)\n        : 1\n\n    const width = clientPixelWidth * scale\n    const height = clientPixelHeight * scale\n\n    const maxError = 0.1 // pixels\n    const isOptimalSize =\n      Math.abs(rendererPixelWidth - width) < maxError &&\n      Math.abs(rendererPixelHeight - height) < maxError\n\n    if (isOptimalSize) {\n      return false\n    }\n\n    this.renderer.setSize(width, height)\n\n    adjustCamera(this.camera, width, height)\n\n    return true\n  }\n}\n","import React from 'react'\n\nimport { OMOVIVisualizer } from 'omovi'\nimport 'omovi/dist/index.css'\n\nconst App = () => {\n  return <OMOVIVisualizer />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}